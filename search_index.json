[["index.html", "Découvrir R et RStudio Chapitre 1 Introduction 1.1 Le parcours de formation 1.2 Objectifs du module 1", " Découvrir R et RStudio Thierry Zorn, Murielle Lethrosne, Vivien Roussez, Pascal Irz &amp; Nicolas Torterotot 11 June 2023 Chapitre 1 Introduction Crédit photographique Pascal Boulin 1.1 Le parcours de formation Ce dispositif de formation vise à faire monter en compétence les agents du MTECT (Ministère de la Transition écologique et de la Cohésion des territoires) et du MTE (Ministère de la Transition énergétique) dans le domaine de la science de la donnée avec le logiciel R. Il est conçu pour être déployé à l’échelle nationale par le réseau des CVRH (Centre de Valorisation des Ressources Humaines). Le parcours proposé est structuré en modules de 2 jours chacun. Avoir suivi les deux premiers (ou disposer d’un niveau équivalent) est un pré-requis pour suivre les suivants qui sont proposés “à la carte” : Module 1 : Socle - Premier programme en R Module 2 : Socle - Préparation des données Module 3 : Statistiques descriptives Module 4 : Analyse des données multi-dimensionnelles Module 5 : Datavisualisation : Produire des graphiques, des cartes et des tableaux Module 6 : Publications reproductibles avec RMarkdown (à venir) Module 7 : Analyse spatiale Module 8 : Big data et optimisation du code (à venir) Module 9 : Applications interactives avec RShiny (à venir) La mise à disposition des supports de formation se fait par la page d’accueil du parcours de formation. Ces supports sont en licence ouverte. Si vous souhaitez accéder aux sources ou aux données mobilisées pendant les formations, vous pouvez directement les télécharger depuis le Github du pôle ministériel. Un package d’exercices, {savoirfR} rassemble toutes les données et les consignes d’exercices de ce parcours de formation (Modules 1, 2, 5 et 7 seulement pour l’instant). Pour vous tenir au courant de l’offre de formation proposée par le réseau des CVRH, consultez la plateforme OUPS (un accès intranet MTECT-MTE est nécessaire). Vous pouvez vous y abonner pour recevoir les annonces de formation qui vous intéressent. Pour échanger de l’information, discuter autour de R ou encore faire part de difficultés et trouver ensemble les solutions, il existe deux canaux d’entraide : s’inscrire en envoyant un message vide à l’adresse sympa@developpement-durable.gouv.fr ; rejoindre le fil Ariane #utilisateurs_r. 1.2 Objectifs du module 1 Ce module vise à faire découvrir : R et son écosystème. L’interface de RStudio. Les méthodes élémentaires d’importation des données Des premières statistiques Des premières représentations graphiques Il s’agit d’avoir les clefs pour commencer à travailler rapidement sur R en complément, voire en remplacement d’autres outils (Excel, SAS…). Les concepts de programmation sont également abordés pour comprendre les syntaxes proposées dans les différents forums d’aide. "],["r-son-écosystème-et-ses-possibilités.html", "Chapitre 2 R, son écosystème et ses possibilités 2.1 Le groupe de référents R du pôle ministériel 2.2 R c’est quoi ? 2.3 Un peu d’histoire 2.4 Un logiciel libre 2.5 Que peut-on faire avec R ? 2.6 Un logiciel modulaire 2.7 Des exemples de ce qu’on peut faire avec R :", " Chapitre 2 R, son écosystème et ses possibilités 2.1 Le groupe de référents R du pôle ministériel Un groupe pour structurer une offre de formations sur R Un réseau d’entraide 2.2 R c’est quoi ? Un langage de programmation interprété exécutable pas à pas \\(\\rightarrow\\) lignes de code Un logiciel interactif permettant de traiter divers types de données 2.3 Un peu d’histoire À l’origine existait le langage S, servant à programmer avec des données (Bell laboratory, années 70) Au milieu des années 90, mélange de S et du langage Lisp pour le dédier à l’analyse de données et aux graphiques \\(\\rightarrow\\) création de R. Ihaka R, Gentleman R (1996) R: A Language for Data Analysis and Graphics. Journal of Computational and Graphical Statistics, 5(3), 299–314 S’est d’abord développé dans le monde académique, puis a essaimé vers d’autres domaines professionnels, voire associatifs Système toujours d’actualité - Mise à jour tous les 6 mois Avenir dans la statistique publique : adopté comme standard par l’Insee (à l’horizon 2025) et divers SSM. Des packages pour : charger les données produites par l’Insee au format sdmx, charger les formats des organisations internationales (Eurostat, OCDE, ONU, etc.), charger des couches spatiales shp, flux ou autres, charger le cadastre au format EDIGEO, … interroger facilement des API, interagir avec des bases de données, charger des fonds de cartes, réaliser des publications conformes à la charte graphique de l’Etat, gérer les millésimes du référentiel communal, etc. 2.4 Un logiciel libre Disponible en libre téléchargement sur le site officiel du CRAN = Comprehensive R Archive Network C’est le site de référence pour R. Il contient non seulement les installeurs du logiciel mais également de nombreuses ressources : documentations, FAQ, tutoriels… Installable sur la plupart des systèmes d’exploitation Utilisé en recherche, en enseignement et en entreprise Une communauté très active : Forum des utilisateurs de R en français Communauté française des utilisateurs de R (avec des packages spécifiques, qui permettent de gérer les changements de géographie communale par exemple) : Frrrenchies Slack de ces utilisateurs (pour les questions/réponses, actualités…) Slack R-bloggers : https://www.r-bloggers.com/ Stackoverflow : https://stackoverflow.com/questions/tagged/r C’est un logiciel libre : les utilisateurs ont la liberté d’exécuter, copier, distribuer, étudier, modifier et améliorer ce logiciel. R fait partie de la “galaxie” GNU (GNU’s Not Unix). R est donc libre, gratuit et multi-plateformes. 2.5 Que peut-on faire avec R ? Lire des données de formats divers, les convertir Les manipuler (prétraitements) Les enrichir à partir de données externes Les analyser, les modéliser, Présenter les résultats (tableaux, graphiques, cartes) Publier… … et ce au moyen d’une palette de méthodes extrêmement diversifiées. Privilégie la flexibilité et le découpage des traitements en parties simples. 2.6 Un logiciel modulaire Le package base contient nombreuses fonctionnalités Extensible au moyen de packages (1 package = 1 ensemble de nouvelles fonctions) Nombreuses extensions spécialisées De base, R permet déjà de faire un très grand nombre de choses avec son socle commun : le package base. Pour afficher la liste des fonctions disponibles dans le package base : library(help = &#39;base&#39;) Sur ce package base vient se greffer un ensemble de packages (plugins, modules, librairies, extensions) complémentaires. Un package est une bibliothèque de fonctions. La plupart de ceux qui font référence sont mis à disposition de tous sur le dépôt CRAN. Cela permet d’étendre à l’infini les possibilités de R : celles-ci sont seulement limitées par la volonté de développement (et de maintien) des utilisateurs. De même que les packages sont dépendants de fonctions du module principal base, certains packages peuvent être dépendants de fonctionnalités d’autres packages \\(\\rightarrow\\) notion d’arbre des dépendances (géré par R de façon transparente). Structure modulaire \\(\\rightarrow\\) il existe de multiples façons d’effectuer une même tâche. Il suffit d’une méthode maîtrisée pour aller au résultat. Les fonctionnalités utilisables dans R, sont en perpétuelle évolution et permettent d’intégrer les méthodes les plus récentes dans des domaines qui évoluent rapidement : modélisation, analyse spatiale, dataviz,… Le groupe des référents R propose un tutoriel d’installation et de configuration de R sur https://github.com/MTES-MCT/parcours-r/wiki/Installation-de-R-et-RStudio-Desktop-au-MTE. 2.7 Des exemples de ce qu’on peut faire avec R : Le support de cette formation Les publications régionales sur le parc locatif social Visualisation du compte du logement Les pesticides dans les cours d’eau des Pays de la Loire Des exemples de ce qu’on peut faire avec shiny "],["présentation-de-linterface-et-premières-manipulations.html", "Chapitre 3 Présentation de l’interface et premières manipulations 3.1 Une interface dédiée : RStudio 3.2 Session et répertoire de travail 3.3 C’est à vous : créer un répertoire de travail 3.4 Prise en main de la console 3.5 Création d’une variable 3.6 C’est à vous : créer et manipuler des variables (Exercice 1) 3.7 Utilité des scripts 3.8 C’est à vous : utiliser un script (Exercice 1bis) 3.9 Installer et charger un package", " Chapitre 3 Présentation de l’interface et premières manipulations Ce chapitre permet de découvrir l’interface de travail RStudio et les principales fonctionnalités pour débuter. 3.1 Une interface dédiée : RStudio Environnement de développement conçu spécialement pour R Interface utilisateur simple, conviviale, configurable et intégrant plusieurs outils Disponible sur http://www.rstudio.com L’interface RStudio est composée de différents panneaux, dont l’arrangement peut être reconfiguré, incluant une console, un navigateur de fichiers et graphiques, l’espace de travail et l’historique des commandes. D’autres environnements graphiques existent, Rstudio semble le plus approprié à nos métiers. 3.2 Session et répertoire de travail Session de travail R : commence à l’ouverture de RStudio et se termine en le quittant. Répertoire de travail R : dossier à partir duquel le logiciel va chercher les fichiers de scripts et de données. Tout ce qui a été fait au cours d’une session peut être enregistré dans le répertoire de travail : données historique des fonctions … Nouvelles fonctions Attention setwd() pour définir un répertoire de travail Seulement / et pas \\, chemin entre \"path\" help() et ? pour afficher l’aide . dir() pour lister un répertoire . Attention avec le répertoire de travail : si on l’écrit en dur setwd('...'), les anti-slash windows (\\) doivent être remplacés par des slash(/) Concernant le répertoire de travail, quelques conseils : Créer un nouveau répertoire pour un projet particulier qui sera votre répertoire de travail Créer des sous-répertoires dans ce répertoire : “./Data”, “./Figures”, “./Redaction”… Rassembler autant que possible les fichiers qui seront utilisés dans le cadre de ce projet et éviter d’aller chercher des fichiers ailleurs (sauf à inscrire dans le script une instruction de téléchargement exécutable par tous) 3.3 C’est à vous : créer un répertoire de travail Sur le poste de travail, créer un dossier ‘premiers_pas’ à partir du menu ‘New Folder’ (cadran droite bas) Dans Rstudio, définir ce dossier comme répertoire de travail directement en utilisant setwd('') Appeler l’aide en ligne par ?setwd ou help(setwd) Faire une recherche dans la partie Help de RStudio Créer un script à partir du menu ‘File/New File/R script’ et l’enregistrer sous ‘mes_tous_premiers_pas.R’ Lire le contenu du répertoire de travail avec dir() 3.4 Prise en main de la console Effectuer et afficher les résultats de calculs de base (+, -, *, /, ^, ...) Utiliser des fonctions spécifiques : sum, abs, round… On peut remonter dans l’historique des fonctions pour en rappeler une Nouvelles fonctions Attention sum() pour sommer un résultat Séparateur décimal point (.) abs() pour retourner la valeur absolue . round() pour arrondir un nombre . flèches pour naviguer dans l’historique . 3.5 Création d’une variable On assigne un contenu à une variable au moyen de &lt;- La flèche d’assignation peut être écrite avec le raccourci clavier alt + “-” (tiret du 6 ou signe ‘moins’ du pavé numérique). ma_variable &lt;- 2 ma_variable &lt;- &quot;Toulouse&quot; ma_variable &lt;- c(&quot;Toulouse&quot;, &quot;Nantes&quot;, &quot;Strasbourg&quot;) ma_variable &lt;- 1:10 \\(\\rightarrow\\) Les variables peuvent être numériques, de type texte ou booléen (TRUE/FALSE) et elles peuvent être réutilisées. Nouvelles fonctions Attention pour le nommage des variables ls() pour faire lister les variables existantes Casse -&gt; seulement minuscules paste() pour concaténer des variables textes Pas de caractères spéciaux ni accentués rm() pour supprimer une variable Pas d’espaces ni tirets (-) ; préférer (_) Adopter des règles de nommage cohérentes, par exemples celles-ci. ATTENTION : un nom de variable ne peux pas commencer par un chiffre et certains noms sont interdits (voir 4.6) 3.6 C’est à vous : créer et manipuler des variables (Exercice 1) Dans la console, créer deux variables numériques a et b de valeur 5 et 4 par assignation : a &lt;- 5 et b &lt;- 4 Que se passe-t-il dans le panneau Environnement (en haut à droite) ? Faites maintenant un calcul avec ces variables comme a+b et a*b. Vous allez ensuite créer une troisième variable à partir d’un calcul sur les deux premières : c &lt;- a + 3 * b Vous pouvez afficher la liste des variables avec la fonction ls(). Modifiez maintenant la valeur de a en lui donnant la valeur 10. Vérifiez votre ré-assignation dans la panneau Environement. Créez une variable chaîne de caractère : t &lt;- 'texte' (vous pouvez également utiliser les doubles quotes comme “texte” mais ne les mélangez pas). Concaténez (mettez bout à bout) a et t avec la fonction paste(a, t). Que constatez-vous ? Pour plus de renseignements sur la fonction paste(), pensez à utiliser l’aide de R avec help(paste). Créez maintenant les variables A &lt;- 15 et B &lt;- 12. Que voyez-vous dans la panneau Environement ? Vous pouvez supprimer la variables A et B en utilisant la fonction rm() (utilisez l’aide de R pour avoir plus de renseignements sur la fonction rm). Résultat attendu : ## [1] 5 ## [1] 4 ## [1] 9 ## [1] 20 ## [1] 17 ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;df&quot; &quot;ma_variable&quot; ## [1] 17 ## [1] &quot;texte&quot; ## [1] &quot;10 texte&quot; 3.7 Utilité des scripts Garder la trace d’une longue succession de lignes de code Pouvoir exécuter ce code (pas à pas ou en entier) Le modifier plus rapidement pour l’adapter Pouvoir le réutiliser avec de nouvelles données Nouvelles fonctions Attention # pour des commentaires explicatifs du code Importance de bien commenter print() pour afficher sur la console . Ctrl+Entrée pour lancer un script ligne par ligne . Utilisation simple de R \\(\\rightarrow\\) mode console. Chaque ordre, bout de code est rentré et exécuté au fur et à mesure sur la console. Actions plus complexes, longues, nécessitant une maintenance, des modifications \\(\\rightarrow\\) travailler à partir de la fenêtre éditeur. Les parties de code sont enchaînées et enregistrées sous la forme d’un fichier texte réutilisable par la suite. Toujours utiliser des commentaires, indiquer plus le ‘pourquoi’ que le ‘quoi’. Permet de pouvoir mieux comprendre ce que l’on a fait lorsqu’on reprend un programme plus tard ou lorsqu’on le donne à quelqu’un. 3.8 C’est à vous : utiliser un script (Exercice 1bis) Recopier le script ci-dessous et changer les paramètres pour le re-exécuter plusieurs fois Sauvegarder ce script dans votre répertoire de travail, fermez le Redémarrer votre session RStudio, le rouvrir, et ré-exécuter le script # Supprimer toutes les variables existantes rm(list = ls()) # Création de mes variables taille et poids ; attention au point décimal poids &lt;- 91 taille &lt;- 1.87 # Calcul de l&#39;IMC : poids sur taille au carré imc &lt;- poids / (taille ^ 2) # Affichage du résultat print (imc) ## [1] 26.02305 3.9 Installer et charger un package Pour manipuler nos données, nous allons nous servir de fonctionnalités présentes dans le package tidyverse. La première fois que l’on veut utiliser un package, il faut le télécharger sur notre machine, avec install.packages() : install.packages(&quot;tidyverse&quot;) Puis à l’ouverture d’une nouvelle session R, le charger (si on a besoin de ses fonctions), avec library() : library(tidyverse) Le package est prêt à être utilisé ! Pour appliquer une fonction à un objet, la syntaxe est : nom_de_la_fonction(objet, attribut1, attribut2, ...) Pour stocker le résultat de cette fonction dans une variable : ma_variable &lt;- nom_de_la_fonction(objet, attribut1, attribut2, ...) Une erreur fréquente est : Error in nom_de_le_fonction() : impossible de trouver la fonction \"nom_de_la_fonction\" Cela signifie que le package auquel appartient la fonction n’est pas chargé, voire pas installé. Il peut exister des fonctions homonymes dans différents packages. Sans précision, la fonction qui sera appliquée sera celle du package chargé en dernier. Pour spécifier : nom_du_package::nom_de_la_fonction(objet) "],["bien-commencer.html", "Chapitre 4 Bien commencer 4.1 Créer un projet sous Rstudio pour vous permettre de recenser vos travaux. 4.2 Utilisation du package {savoirfR} 4.3 Intégrer vos données 4.4 Créer votre arborescence de projet 4.5 Activer les packages nécessaires 4.6 Bien structurer ses projets data", " Chapitre 4 Bien commencer 4.1 Créer un projet sous Rstudio pour vous permettre de recenser vos travaux. Pourquoi travailler avec les projets Rstudio plutôt que les scripts R ? Cela permet la portabilité : le répertoire de travail par défaut d’un projet est le répertoire où est ce projet. Si vous transmettez celui-ci à un collègue, le fait de lancer un programme ne dépend pas de l’arborescence de votre machine. Fini les setwd(\"chemin/qui/marche/uniquement/sur/mon/poste\") ! Toujours sur la portabilité, un projet peut être utilisé avec un outil comme renv qui va vous intégrer en interne au projet l’ensemble des packages nécessaires au projet. Cela permet donc à votre collègue à qui vous passez votre projet de ne pas avoir à les installer et, surtout, si vous mettez à jour votre environnement R, votre projet restera toujours avec les versions des packages avec lesquelles vous avez fait tourner votre projet à l’époque. Cela évite d’avoir à subir les effets d’une mise à jour importante d’un package qui casserait votre code. Pour activer renv sur un projet, il faut l’installer avec install.packages(\"renv\"). Pour intialiser la sauvegarde des packages employés dans le projet, il faut utiliser renv::init() Les packages chargés dans le projet sont enregistrés dans un sous-dossier dédié. En cours de travail sur le projet, la commande renv::snapshot() permet de faire une sauvegarde, la commande renv::restore() permet de charger la dernière sauvegarde. En savoir plus sur renv Cela permet de se forcer à travailler en mode projet : on intègre à un seul endroit tout ce qui est lié à un projet : données brutes, données retravaillées, scripts, illustrations, documentations, publications… et donc y compris les packages avec renv. On peut travailler sur plusieurs projets en même temps, Rstudio ouvre autant de sessions que de projets dans ce cas. Les projets Rstudio intègrent une interface avec les outils de gestion de version Git et SVN. Cela veut dire que vous pouvez versionner votre projet et l’héberger simplement comme répertoire sur des plateformes de gestion de code telle que Github ou Gitlab. Pour créer un projet : Cliquez sur Project en haut à droite puis New Project. Cliquez sur New Directory. 4.2 Utilisation du package {savoirfR} Pour faciliter le déroulé de ce module, l’ensemble des exercices (énoncés, corrigés et données) a été intégré à un package réalisé par le groupe des référents R : {savoirfR} install.packages(&#39;remotes&#39;) remotes::install_github(&quot;MTES-MCT/savoirfR&quot;) Pour l’utiliser, il suffit de créer un nouveau projet dans un nouveau répertoire, en sélectionnant le “Project Type” Exercice Parcours R MTES-MCT. Remplissez et sélectionnez le module suivi. 4.3 Intégrer vos données Une bonne pratique est de créer un sous répertoire /data pour stocker les données sur lesquelles vous aurez à travailler. Vous pouvez le faire depuis l’explorateur de fichier de votre système d’exploitation ou directement à partir de l’explorateur de fichier de RStudio. Cela marche bien quand on a un seul type de données, mais en général on va avoir à travailler sur des données brutes que l’on va retravailler ensuite et vouloir stocker à part. Si par la suite vous souhaitez avoir des exemples de bonnes pratiques sur comment structurer vos données, vous pouvez vous référer au chapitre data du livre d’Hadley Wickham sur la construction de packages R (tout package R étant aussi un projet !). 4.4 Créer votre arborescence de projet Créer un répertoire /R ou vous mettrez vos scripts R. Créer un répertoire /figures ou vous mettrez vos illustrations issues de R. 4.5 Activer les packages nécessaires Commencer par rajouter un script dans le répertoire /R à votre projet qui commencera par : activer l’ensemble des packages nécessaires charger les données dont vous aurez besoin. library(tidyverse) library(GGally) library(plotly) base &lt;- read.csv(file = &quot;extdata/Base_synth_territoires.csv&quot;, fileEncoding = &#39;latin1&#39;, header = TRUE, sep = &quot;;&quot;, dec = &quot;,&quot;) 4.6 Bien structurer ses projets data Plusieurs documents peuvent vous inspirer sur la structuration de vos projets data par la suite. En voici quelques uns : https://github.com/pavopax/new-project-template https://nicercode.github.io/blog/2013-04-05-projects/ https://www.inwt-statistics.com/read-blog/a-meaningful-file-structure-for-r-projects.html http://projecttemplate.net/architecture.html À partir du moment où quelques grands principes sont respectés (un répertoire pour les données brutes en lecture seule par exemple), le reste est surtout une question d’attirance plus forte pour l’une ou l’autre solution. L’important est de vous tenir ensuite à conserver toujours la même arborescence dans vos projets afin de vous y retrouver plus simplement. "],["mon-premier-jeu-de-données.html", "Chapitre 5 Mon premier jeu de données 5.1 Les types de valeurs dans R 5.2 Les vecteurs 5.3 Les dataframes 5.4 Les fonctions et les valeurs particulières 5.5 Importation de données 5.6 Gérer le type des variables 5.7 Structure des données : le dataframe 5.8 Exercice 2 : importer des données et premier coup d’oeil 5.9 Catalogue d’attributs de la base", " Chapitre 5 Mon premier jeu de données 5.1 Les types de valeurs dans R Une valeur constitue l’unité de base des données pour R. Comme pour la plupart des logiciels, elles peuvent être de trois types : Numérique : entier, double Caractère : texte ou code Logique : booléens En anglais : numeric, character et logical ! Les formats de dates sont de type character. 5.2 Les vecteurs Les valeurs peuvent être structurées au sein de vecteurs. Ces vecteurs peuvent être vus comme des colonnes de valeurs toutes du même type. Différentes fonctions permettent de créer des vecteurs. vect_num &lt;- c(1, 160, 2, 9) vect_txt &lt;- c(&quot;Je&quot;, &quot;programme&quot;, &quot;en&quot;, &quot;R&quot;) sequence &lt;- seq(from = 1, to = 10, by = 1) sequence_pareille &lt;- 1:10 repetition &lt;- rep(&quot;bla&quot;, 3) 5.3 Les dataframes Plusieurs vecteurs de types différents possédant un même nombre de lignes peuvent être accolés pour former une dataframe. Les dataframes sont les objets les plus courants dans le traitement de données usuel. Il s’agit de tableaux dont les lignes correspondent à des observations et les colonnes à des variables. Ces dataframes peuvent être créées par association des vecteurs avec les fonctions : dataframe_a &lt;- data.frame(vect_num, vect_txt) dataframe_b &lt;- bind_cols(&quot;vect_num&quot; = vect_num, &quot;vect_txt&quot; = vect_txt) Une dataframe peut aussi être créée par l’import d’un tableau, voir le chapitre dédié. Il est possible d’accéder aux éléments d’une dataframe à partir du numéro de ligne et de colonne, grâce aux crochets : base[1,3] \\(\\rightarrow\\) valeur de la première ligne et de la troisième colonne base[2,] \\(\\rightarrow\\) toutes les variables pour la 2e observation base[,4] \\(\\rightarrow\\) toutes les observations de la quatrième colonne base[,’V6’] \\(\\rightarrow\\) toutes les observations de la variable V6 \\(\\Rightarrow\\) Utile pour sélectionner une partie d’une table : base[1:4, c(3, 6)] 5.4 Les fonctions et les valeurs particulières NA : valeur manquante (Not Available) dans une dataframe ou en résultat d’une fonction NaN : pas un nombre (Not a Number) lorsqu’une fonction tente de diviser par 0 -Inf, Inf : inﬁni positif ou négatif lorsque une fonction diverge Une valeur manquante peut perturber l’exécution d’une fonction : V1 &lt;- c(1, 14, NA, 32.7) mean(V1) # renvoie NA. Not good ! ## [1] NA mean(V1, na.rm = TRUE) # renvoie 15.9 - OK ! ## [1] 15.9 Les noms de ces valeurs particulières sont “réservés” par R, ils ne peuvent pas être utilisés comme nom de variable. C’est également le cas des booléens (TRUE, FALSE, T et F) \\(\\Rightarrow\\) Le module 2 “Préparation des données” aborde la gestion de ces valeurs particulières. 5.5 Importation de données Conseil : exporter les données au format CSV ; c’est le format le plus interopérable (supporté par tous les logiciels stat). Utiliser ensuite la fonction read.csv après avoir défini le répertoire de travail (ou en donnant le chemin complet) base0 &lt;- read.csv(file = &quot;extdata/Base_synth_territoires.csv&quot;, fileEncoding = &#39;latin1&#39;, header = TRUE, sep = &quot;;&quot;, dec = &quot;,&quot;) header =indique la présence des noms de variable sur la première ligne sep = indique le séparateur de champ : ‘;’ ‘/t’ pour tabulation dec = indique le séparateur de décimale (‘.’ par défaut) colClasses =permet de préciser le type de chaque colonne de la donnée en entrée, par exemple pour une table de 3 colonnes de types texte, puis 2 fois numériques : colClasses = c(\"character\", \"numeric\", \"numeric\"). NA pour laisser R deviner, \"NULL\" pour éviter d’importer la colonne. \\(\\Rightarrow\\) ?read.csv pour plus d’options Autres façons d’importer les données Fonction read_delim, du package readr, plus rapide Fonction fread, du package data.table, beaucoup plus rapide !! Pour importer les fichiers XLS, ODS, SHP ou DBF, il existe des fonctions et des packages spécifiques Le passage par un fichier csv est très recommandé. Note : le format parquet est très intéressant pour des tables de plusieurs centaines de milliers de lignes. 5.6 Gérer le type des variables Chaque variable est du type de son contenu (numeric, character, logical). Si les valeurs prises par la variables correspondent à un nombre fini de modalités, la variable peut être du type “factor”. Ses composantes sont toujours d’un des 3 types décrits ci-dessus mais il est possible d’employer des fonctions spécifiques au traitement de modalités. À chaque type de variable correspond une utilisation. Lors de l’import des données, un type est affecté automatiquement par R. Mais le type peut être erroné. Il suffit alors de les convertir : base &lt;- mutate(base0, LIBGEO = as.character(LIBGEO)) ou as.factor(), as.numeric(), etc… Pour être sûr de ne pas faire de bêtise, il vaut mieux gérer les types au moment de l’importation avec le paramètre colClasses \\(\\rightarrow\\) exercice ! 5.7 Structure des données : le dataframe n lignes (observations) p colonnes (variables) Les fonctions suivantes permettent de connaître la structure de la dataframe, d’en connaître les variables, d’en observer certaines lignes ou d’en vérifier le type. nrow(base) # nombre de lignes ## [1] 36689 ncol(base) # nombre de colonnes ## [1] 38 dim(base) # nombre de lignes et de colonnes ## [1] 36689 38 names(base) # noms des variables ## [1] &quot;CODGEO&quot; &quot;LIBGEO&quot; &quot;REG&quot; &quot;DEP&quot; ## [5] &quot;ZAU&quot; &quot;ZE&quot; &quot;P14_POP&quot; &quot;P09_POP&quot; ## [9] &quot;SUPERF&quot; &quot;NAIS0914&quot; &quot;DECE0914&quot; &quot;P14_MEN&quot; ## [13] &quot;NAISD15&quot; &quot;DECESD15&quot; &quot;P14_LOG&quot; &quot;P14_RP&quot; ## [17] &quot;P14_RSECOCC&quot; &quot;P14_LOGVAC&quot; &quot;P14_RP_PROP&quot; &quot;NBMENFISC13&quot; ## [21] &quot;PIMP13&quot; &quot;MED13&quot; &quot;TP6013&quot; &quot;P14_EMPLT&quot; ## [25] &quot;P14_EMPLT_SAL&quot; &quot;P09_EMPLT&quot; &quot;P14_POP1564&quot; &quot;P14_CHOM1564&quot; ## [29] &quot;P14_ACT1564&quot; &quot;ETTOT14&quot; &quot;ETAZ14&quot; &quot;ETBE14&quot; ## [33] &quot;ETFZ14&quot; &quot;ETGU14&quot; &quot;ETGZ14&quot; &quot;ETOQ14&quot; ## [37] &quot;ETTEF114&quot; &quot;ETTEFP1014&quot; str(base) # nom, type et extrait des variables ## &#39;data.frame&#39;: 36689 obs. of 38 variables: ## $ CODGEO : chr &quot;01001&quot; &quot;01002&quot; &quot;01004&quot; &quot;01005&quot; ... ## $ LIBGEO : chr &quot;L&#39;Abergement-Clémenciat&quot; &quot;L&#39;Abergement-de-Varey&quot; &quot;Ambérieu-en-Bugey&quot; &quot;Ambérieux-en-Dombes&quot; ... ## $ REG : int 84 84 84 84 84 84 84 84 84 84 ... ## $ DEP : chr &quot;01&quot; &quot;01&quot; &quot;01&quot; &quot;01&quot; ... ## $ ZAU : chr &quot;120 - Multipolarisée des grandes aires urbaines&quot; &quot;112 - Couronne d&#39;un grand pôle&quot; &quot;112 - Couronne d&#39;un grand pôle&quot; &quot;112 - Couronne d&#39;un grand pôle&quot; ... ## $ ZE : chr &quot;8213 - Villefranche-sur-Saône&quot; &quot;8201 - Ambérieu-en-Bugey&quot; &quot;8201 - Ambérieu-en-Bugey&quot; &quot;8213 - Villefranche-sur-Saône&quot; ... ## $ P14_POP : int 767 239 14022 1627 109 2570 743 338 1142 397 ... ## $ P09_POP : int 787 207 13350 1592 120 2328 660 336 960 352 ... ## $ SUPERF : num 15.95 9.15 24.6 15.92 5.88 ... ## $ NAIS0914 : int 40 16 1051 117 8 175 59 12 56 25 ... ## $ DECE0914 : int 25 7 551 41 3 78 20 11 32 10 ... ## $ P14_MEN : num 306 99.3 6161.1 621.1 52.5 ... ## $ NAISD15 : int 13 5 222 15 2 21 11 2 18 4 ... ## $ DECESD15 : int 5 1 121 7 2 9 3 3 5 0 ... ## $ P14_LOG : num 342.7 161.2 6838.4 661.8 71.5 ... ## $ P14_RP : num 306 99.3 6161.1 621.1 52.5 ... ## $ P14_RSECOCC : num 14 47.3 121.6 10.9 10.9 ... ## $ P14_LOGVAC : num 22.74 14.55 555.64 29.85 8.14 ... ## $ P14_RP_PROP : num 260 84.6 2769 473.3 37.7 ... ## $ NBMENFISC13 : int 297 99 6034 617 47 1014 299 140 431 137 ... ## $ PIMP13 : num NA NA 57.4 NA NA ... ## $ MED13 : num 22130 23213 19554 22388 21872 ... ## $ TP6013 : num NA NA 15.1 NA NA ... ## $ P14_EMPLT : num 85.16 12.81 7452.93 280.57 5.95 ... ## $ P14_EMPLT_SAL: num 52.19 4.95 6743.37 206.38 3.96 ... ## $ P09_EMPLT : num 65.57 17.64 7551.68 286.61 5.29 ... ## $ P14_POP1564 : num 463 141.6 8962.8 1043.1 71.3 ... ## $ P14_CHOM1564 : num 33 9.84 1059.73 66.33 7.93 ... ## $ P14_ACT1564 : num 376 121 6681.9 842.1 57.5 ... ## $ ETTOT14 : int 47 22 1316 141 7 203 66 39 54 36 ... ## $ ETAZ14 : int 9 1 7 14 0 21 2 5 5 6 ... ## $ ETBE14 : int 2 3 60 7 0 18 0 2 6 4 ... ## $ ETFZ14 : int 5 1 131 19 0 21 9 1 13 3 ... ## $ ETGU14 : int 25 14 892 85 5 114 45 27 24 18 ... ## $ ETGZ14 : int 6 4 283 19 1 28 16 6 9 7 ... ## $ ETOQ14 : int 6 3 226 16 2 29 10 4 6 5 ... ## $ ETTEF114 : int 9 2 385 27 0 38 17 6 9 7 ... ## $ ETTEFP1014 : int 0 0 109 5 0 15 2 0 3 0 ... head(base) # 6 premières lignes ## CODGEO LIBGEO REG DEP ## 1 01001 L&#39;Abergement-Clémenciat 84 01 ## 2 01002 L&#39;Abergement-de-Varey 84 01 ## 3 01004 Ambérieu-en-Bugey 84 01 ## 4 01005 Ambérieux-en-Dombes 84 01 ## 5 01006 Ambléon 84 01 ## 6 01007 Ambronay 84 01 ## ZAU ZE ## 1 120 - Multipolarisée des grandes aires urbaines 8213 - Villefranche-sur-Saône ## 2 112 - Couronne d&#39;un grand pôle 8201 - Ambérieu-en-Bugey ## 3 112 - Couronne d&#39;un grand pôle 8201 - Ambérieu-en-Bugey ## 4 112 - Couronne d&#39;un grand pôle 8213 - Villefranche-sur-Saône ## 5 300 - Autre commune multipolarisée 8216 - Chambéry ## 6 112 - Couronne d&#39;un grand pôle 8201 - Ambérieu-en-Bugey ## P14_POP P09_POP SUPERF NAIS0914 DECE0914 P14_MEN NAISD15 DECESD15 ## 1 767 787 15.95 40 25 306.00000 13 5 ## 2 239 207 9.15 16 7 99.33745 5 1 ## 3 14022 13350 24.60 1051 551 6161.06200 222 121 ## 4 1627 1592 15.92 117 41 621.05374 15 7 ## 5 109 120 5.88 8 3 52.51818 2 2 ## 6 2570 2328 33.55 175 78 1028.00000 21 9 ## P14_LOG P14_RP P14_RSECOCC P14_LOGVAC P14_RP_PROP NBMENFISC13 PIMP13 ## 1 342.73473 306.00000 13.99418 22.740550 260.00000 297 NA ## 2 161.16023 99.33745 47.27625 14.546538 84.58436 99 NA ## 3 6838.35437 6161.06200 121.64795 555.644416 2769.00170 6034 57.41294 ## 4 661.76017 621.05374 10.85505 29.851387 473.32736 617 NA ## 5 71.51818 52.51818 10.85714 8.142857 37.65455 47 NA ## 6 1160.00000 1028.00000 56.00000 76.000000 779.00000 1014 62.35178 ## MED13 TP6013 P14_EMPLT P14_EMPLT_SAL P09_EMPLT P14_POP1564 ## 1 22130.00 NA 85.157286 52.191539 65.566193 463.00000 ## 2 23213.00 NA 12.814642 4.946329 17.644456 141.62963 ## 3 19554.00 15.11508 7452.926728 6743.374287 7551.682296 8962.84216 ## 4 22387.62 NA 280.569953 206.382233 286.611037 1043.12909 ## 5 21871.67 NA 5.945455 3.963636 5.285714 71.34545 ## 6 21650.67 NA 487.730918 372.758450 491.138876 1614.00000 ## P14_CHOM1564 P14_ACT1564 ETTOT14 ETAZ14 ETBE14 ETFZ14 ETGU14 ETGZ14 ETOQ14 ## 1 33.000000 376.00000 47 9 2 5 25 6 6 ## 2 9.835391 120.97531 22 1 3 1 14 4 3 ## 3 1059.728437 6681.86216 1316 7 60 131 892 283 226 ## 4 66.326127 842.14083 141 14 7 19 85 19 16 ## 5 7.927273 57.47273 7 0 0 0 5 1 2 ## 6 108.000000 1267.00000 203 21 18 21 114 28 29 ## ETTEF114 ETTEFP1014 ## 1 9 0 ## 2 2 0 ## 3 385 109 ## 4 27 5 ## 5 0 0 ## 6 38 15 tail(base) # 6 dernières lignes ## CODGEO LIBGEO REG DEP ## 36684 97419 Sainte-Rose 4 974 ## 36685 97420 Sainte-Suzanne 4 974 ## 36686 97421 Salazie 4 974 ## 36687 97422 Le Tampon 4 974 ## 36688 97423 Les Trois-Bassins 4 974 ## 36689 97424 Cilaos 4 974 ## ZAU ZE P14_POP ## 36684 400 - Commune isolée hors influence des pôles 0401 - L&#39;Est 6722 ## 36685 112 - Couronne d&#39;un grand pôle 0402 - Le Nord 22406 ## 36686 400 - Commune isolée hors influence des pôles 0401 - L&#39;Est 7132 ## 36687 111 - Grand pôle (plus de 10 000 emplois) 0404 - Le Sud 76796 ## 36688 112 - Couronne d&#39;un grand pôle 0403 - L&#39;Ouest 7198 ## 36689 400 - Commune isolée hors influence des pôles 0404 - Le Sud 5295 ## P09_POP SUPERF NAIS0914 DECE0914 P14_MEN NAISD15 DECESD15 P14_LOG ## 36684 6822 177.60 519 186 2322.000 94 43 2542.478 ## 36685 22437 57.84 1963 508 7686.912 358 100 8328.616 ## 36686 7406 103.82 661 235 2420.000 111 46 2987.000 ## 36687 72658 165.43 6663 2004 29662.460 1339 420 32710.091 ## 36688 7057 42.58 531 217 2484.887 104 54 2890.404 ## 36689 5989 84.40 430 186 2016.000 87 38 2732.690 ## P14_RP P14_RSECOCC P14_LOGVAC P14_RP_PROP NBMENFISC13 PIMP13 MED13 ## 36684 2322.000 28.58054 191.8979 1799.954 NA NA NA ## 36685 7686.912 50.94097 590.7629 4450.648 NA NA NA ## 36686 2420.000 174.00000 393.0000 1849.000 NA NA NA ## 36687 29662.460 1004.31703 2043.3140 15372.921 NA NA NA ## 36688 2484.887 67.58626 337.9313 1773.765 NA NA NA ## 36689 2016.000 239.56501 477.1253 1522.480 NA NA NA ## TP6013 P14_EMPLT P14_EMPLT_SAL P09_EMPLT P14_POP1564 P14_CHOM1564 ## 36684 NA 1272.841 920.0617 1269.573 4306.217 1250.516 ## 36685 NA 4296.362 3618.1538 4185.015 14821.042 3712.486 ## 36686 NA 1519.306 1090.0856 1533.305 4650.000 1369.000 ## 36687 NA 16145.620 12486.5465 14807.249 50316.640 12783.137 ## 36688 NA 1273.858 994.3469 1202.079 4850.570 1360.617 ## 36689 NA 1194.383 993.1546 1314.121 3461.457 1122.361 ## P14_ACT1564 ETTOT14 ETAZ14 ETBE14 ETFZ14 ETGU14 ETGZ14 ETOQ14 ETTEF114 ## 36684 2850.155 414 125 44 31 159 59 55 82 ## 36685 10456.196 1323 136 139 190 694 249 164 267 ## 36686 3108.000 490 148 29 43 214 73 56 95 ## 36687 34446.789 5476 565 398 665 3025 999 823 1032 ## 36688 3524.287 456 42 39 61 223 76 91 59 ## 36689 2415.666 360 49 17 35 193 49 66 65 ## ETTEFP1014 ## 36684 8 ## 36685 66 ## 36686 11 ## 36687 204 ## 36688 20 ## 36689 26 class(base) # la classe de l&#39;objet (du point de vue langage orienté objet) ## [1] &quot;data.frame&quot; typeof(base) # le type d&#39;objet du point de vue &quot;interne&quot; à R ## [1] &quot;list&quot; 5.8 Exercice 2 : importer des données et premier coup d’oeil On peut importer n’importe quel format de données en R (Excel, SAT, Stata, SQL…). Beaucoup sont abordés lors du module 2 “Préparation des données”. Pour ce module, nous ne voyons que l’importation de fichier .CSV. Si vous avez une base de données en Excel ou LibreOffice Calc, sauvegardez l’onglet que vous souhaitez en faisant “enregistrer sous” \\(\\rightarrow\\) “délimité CSV”. Ici, nous travaillerons sur une base de données communales fournie par l’Insee, dite “comparateur de territoires”. Nous travaillons sur des indicateurs au territoire : “extdata/Base_synth_territoires.csv”, extraits de l’outil GEOIDD du ministère et exportés en csv. Utiliser la fonction read.csv() pour importer ce fichier et le stocker dans un objet df. Veillez à ce que la région soit bien importée comme un facteur et non un entier. Inspecter le dataframe avec les fonctions vues auparavant. Résultat attendu : ## &#39;data.frame&#39;: 36689 obs. of 38 variables: ## $ CODGEO : chr &quot;01001&quot; &quot;01002&quot; &quot;01004&quot; &quot;01005&quot; ... ## $ LIBGEO : chr &quot;L&#39;Abergement-Clémenciat&quot; &quot;L&#39;Abergement-de-Varey&quot; &quot;Ambérieu-en-Bugey&quot; &quot;Ambérieux-en-Dombes&quot; ... ## $ REG : Factor w/ 17 levels &quot;01&quot;,&quot;02&quot;,&quot;03&quot;,..: 15 15 15 15 15 15 15 15 15 15 ... ## $ DEP : Factor w/ 100 levels &quot;01&quot;,&quot;02&quot;,&quot;03&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ ZAU : Factor w/ 9 levels &quot;111 - Grand pôle (plus de 10 000 emplois)&quot;,..: 3 2 2 2 8 2 2 5 8 2 ... ## $ ZE : Factor w/ 321 levels &quot;0050 - Mont-de-Marsan&quot;,..: 260 248 248 260 263 248 248 263 266 250 ... ## $ P14_POP : int 767 239 14022 1627 109 2570 743 338 1142 397 ... ## $ P09_POP : int 787 207 13350 1592 120 2328 660 336 960 352 ... ## $ SUPERF : num 15.95 9.15 24.6 15.92 5.88 ... ## $ NAIS0914 : int 40 16 1051 117 8 175 59 12 56 25 ... ## $ DECE0914 : int 25 7 551 41 3 78 20 11 32 10 ... ## $ P14_MEN : num 306 99.3 6161.1 621.1 52.5 ... ## $ NAISD15 : int 13 5 222 15 2 21 11 2 18 4 ... ## $ DECESD15 : int 5 1 121 7 2 9 3 3 5 0 ... ## $ P14_LOG : num 342.7 161.2 6838.4 661.8 71.5 ... ## $ P14_RP : num 306 99.3 6161.1 621.1 52.5 ... ## $ P14_RSECOCC : num 14 47.3 121.6 10.9 10.9 ... ## $ P14_LOGVAC : num 22.74 14.55 555.64 29.85 8.14 ... ## $ P14_RP_PROP : num 260 84.6 2769 473.3 37.7 ... ## $ NBMENFISC13 : int 297 99 6034 617 47 1014 299 140 431 137 ... ## $ PIMP13 : num NA NA 57.4 NA NA ... ## $ MED13 : num 22130 23213 19554 22388 21872 ... ## $ TP6013 : num NA NA 15.1 NA NA ... ## $ P14_EMPLT : num 85.16 12.81 7452.93 280.57 5.95 ... ## $ P14_EMPLT_SAL: num 52.19 4.95 6743.37 206.38 3.96 ... ## $ P09_EMPLT : num 65.57 17.64 7551.68 286.61 5.29 ... ## $ P14_POP1564 : num 463 141.6 8962.8 1043.1 71.3 ... ## $ P14_CHOM1564 : num 33 9.84 1059.73 66.33 7.93 ... ## $ P14_ACT1564 : num 376 121 6681.9 842.1 57.5 ... ## $ ETTOT14 : int 47 22 1316 141 7 203 66 39 54 36 ... ## $ ETAZ14 : int 9 1 7 14 0 21 2 5 5 6 ... ## $ ETBE14 : int 2 3 60 7 0 18 0 2 6 4 ... ## $ ETFZ14 : int 5 1 131 19 0 21 9 1 13 3 ... ## $ ETGU14 : int 25 14 892 85 5 114 45 27 24 18 ... ## $ ETGZ14 : int 6 4 283 19 1 28 16 6 9 7 ... ## $ ETOQ14 : int 6 3 226 16 2 29 10 4 6 5 ... ## $ ETTEF114 : int 9 2 385 27 0 38 17 6 9 7 ... ## $ ETTEFP1014 : int 0 0 109 5 0 15 2 0 3 0 ... ## CODGEO LIBGEO REG DEP ## 1 01001 L&#39;Abergement-Clémenciat 84 01 ## 2 01002 L&#39;Abergement-de-Varey 84 01 ## 3 01004 Ambérieu-en-Bugey 84 01 ## 4 01005 Ambérieux-en-Dombes 84 01 ## 5 01006 Ambléon 84 01 ## 6 01007 Ambronay 84 01 ## ZAU ZE ## 1 120 - Multipolarisée des grandes aires urbaines 8213 - Villefranche-sur-Saône ## 2 112 - Couronne d&#39;un grand pôle 8201 - Ambérieu-en-Bugey ## 3 112 - Couronne d&#39;un grand pôle 8201 - Ambérieu-en-Bugey ## 4 112 - Couronne d&#39;un grand pôle 8213 - Villefranche-sur-Saône ## 5 300 - Autre commune multipolarisée 8216 - Chambéry ## 6 112 - Couronne d&#39;un grand pôle 8201 - Ambérieu-en-Bugey ## P14_POP P09_POP SUPERF NAIS0914 DECE0914 P14_MEN NAISD15 DECESD15 ## 1 767 787 15.95 40 25 306.00000 13 5 ## 2 239 207 9.15 16 7 99.33745 5 1 ## 3 14022 13350 24.60 1051 551 6161.06200 222 121 ## 4 1627 1592 15.92 117 41 621.05374 15 7 ## 5 109 120 5.88 8 3 52.51818 2 2 ## 6 2570 2328 33.55 175 78 1028.00000 21 9 ## P14_LOG P14_RP P14_RSECOCC P14_LOGVAC P14_RP_PROP NBMENFISC13 PIMP13 ## 1 342.73473 306.00000 13.99418 22.740550 260.00000 297 NA ## 2 161.16023 99.33745 47.27625 14.546538 84.58436 99 NA ## 3 6838.35437 6161.06200 121.64795 555.644416 2769.00170 6034 57.41294 ## 4 661.76017 621.05374 10.85505 29.851387 473.32736 617 NA ## 5 71.51818 52.51818 10.85714 8.142857 37.65455 47 NA ## 6 1160.00000 1028.00000 56.00000 76.000000 779.00000 1014 62.35178 ## MED13 TP6013 P14_EMPLT P14_EMPLT_SAL P09_EMPLT P14_POP1564 ## 1 22130.00 NA 85.157286 52.191539 65.566193 463.00000 ## 2 23213.00 NA 12.814642 4.946329 17.644456 141.62963 ## 3 19554.00 15.11508 7452.926728 6743.374287 7551.682296 8962.84216 ## 4 22387.62 NA 280.569953 206.382233 286.611037 1043.12909 ## 5 21871.67 NA 5.945455 3.963636 5.285714 71.34545 ## 6 21650.67 NA 487.730918 372.758450 491.138876 1614.00000 ## P14_CHOM1564 P14_ACT1564 ETTOT14 ETAZ14 ETBE14 ETFZ14 ETGU14 ETGZ14 ETOQ14 ## 1 33.000000 376.00000 47 9 2 5 25 6 6 ## 2 9.835391 120.97531 22 1 3 1 14 4 3 ## 3 1059.728437 6681.86216 1316 7 60 131 892 283 226 ## 4 66.326127 842.14083 141 14 7 19 85 19 16 ## 5 7.927273 57.47273 7 0 0 0 5 1 2 ## 6 108.000000 1267.00000 203 21 18 21 114 28 29 ## ETTEF114 ETTEFP1014 ## 1 9 0 ## 2 2 0 ## 3 385 109 ## 4 27 5 ## 5 0 0 ## 6 38 15 ## CODGEO LIBGEO REG DEP ## 36684 97419 Sainte-Rose 04 974 ## 36685 97420 Sainte-Suzanne 04 974 ## 36686 97421 Salazie 04 974 ## 36687 97422 Le Tampon 04 974 ## 36688 97423 Les Trois-Bassins 04 974 ## 36689 97424 Cilaos 04 974 ## ZAU ZE P14_POP ## 36684 400 - Commune isolée hors influence des pôles 0401 - L&#39;Est 6722 ## 36685 112 - Couronne d&#39;un grand pôle 0402 - Le Nord 22406 ## 36686 400 - Commune isolée hors influence des pôles 0401 - L&#39;Est 7132 ## 36687 111 - Grand pôle (plus de 10 000 emplois) 0404 - Le Sud 76796 ## 36688 112 - Couronne d&#39;un grand pôle 0403 - L&#39;Ouest 7198 ## 36689 400 - Commune isolée hors influence des pôles 0404 - Le Sud 5295 ## P09_POP SUPERF NAIS0914 DECE0914 P14_MEN NAISD15 DECESD15 P14_LOG ## 36684 6822 177.60 519 186 2322.000 94 43 2542.478 ## 36685 22437 57.84 1963 508 7686.912 358 100 8328.616 ## 36686 7406 103.82 661 235 2420.000 111 46 2987.000 ## 36687 72658 165.43 6663 2004 29662.460 1339 420 32710.091 ## 36688 7057 42.58 531 217 2484.887 104 54 2890.404 ## 36689 5989 84.40 430 186 2016.000 87 38 2732.690 ## P14_RP P14_RSECOCC P14_LOGVAC P14_RP_PROP NBMENFISC13 PIMP13 MED13 ## 36684 2322.000 28.58054 191.8979 1799.954 NA NA NA ## 36685 7686.912 50.94097 590.7629 4450.648 NA NA NA ## 36686 2420.000 174.00000 393.0000 1849.000 NA NA NA ## 36687 29662.460 1004.31703 2043.3140 15372.921 NA NA NA ## 36688 2484.887 67.58626 337.9313 1773.765 NA NA NA ## 36689 2016.000 239.56501 477.1253 1522.480 NA NA NA ## TP6013 P14_EMPLT P14_EMPLT_SAL P09_EMPLT P14_POP1564 P14_CHOM1564 ## 36684 NA 1272.841 920.0617 1269.573 4306.217 1250.516 ## 36685 NA 4296.362 3618.1538 4185.015 14821.042 3712.486 ## 36686 NA 1519.306 1090.0856 1533.305 4650.000 1369.000 ## 36687 NA 16145.620 12486.5465 14807.249 50316.640 12783.137 ## 36688 NA 1273.858 994.3469 1202.079 4850.570 1360.617 ## 36689 NA 1194.383 993.1546 1314.121 3461.457 1122.361 ## P14_ACT1564 ETTOT14 ETAZ14 ETBE14 ETFZ14 ETGU14 ETGZ14 ETOQ14 ETTEF114 ## 36684 2850.155 414 125 44 31 159 59 55 82 ## 36685 10456.196 1323 136 139 190 694 249 164 267 ## 36686 3108.000 490 148 29 43 214 73 56 95 ## 36687 34446.789 5476 565 398 665 3025 999 823 1032 ## 36688 3524.287 456 42 39 61 223 76 91 59 ## 36689 2415.666 360 49 17 35 193 49 66 65 ## ETTEFP1014 ## 36684 8 ## 36685 66 ## 36686 11 ## 36687 204 ## 36688 20 ## 36689 26 ## [1] &quot;CODGEO&quot; &quot;LIBGEO&quot; &quot;REG&quot; &quot;DEP&quot; ## [5] &quot;ZAU&quot; &quot;ZE&quot; &quot;P14_POP&quot; &quot;P09_POP&quot; ## [9] &quot;SUPERF&quot; &quot;NAIS0914&quot; &quot;DECE0914&quot; &quot;P14_MEN&quot; ## [13] &quot;NAISD15&quot; &quot;DECESD15&quot; &quot;P14_LOG&quot; &quot;P14_RP&quot; ## [17] &quot;P14_RSECOCC&quot; &quot;P14_LOGVAC&quot; &quot;P14_RP_PROP&quot; &quot;NBMENFISC13&quot; ## [21] &quot;PIMP13&quot; &quot;MED13&quot; &quot;TP6013&quot; &quot;P14_EMPLT&quot; ## [25] &quot;P14_EMPLT_SAL&quot; &quot;P09_EMPLT&quot; &quot;P14_POP1564&quot; &quot;P14_CHOM1564&quot; ## [29] &quot;P14_ACT1564&quot; &quot;ETTOT14&quot; &quot;ETAZ14&quot; &quot;ETBE14&quot; ## [33] &quot;ETFZ14&quot; &quot;ETGU14&quot; &quot;ETGZ14&quot; &quot;ETOQ14&quot; ## [37] &quot;ETTEF114&quot; &quot;ETTEFP1014&quot; ## [1] &quot;data.frame&quot; ## [1] &quot;list&quot; 5.9 Catalogue d’attributs de la base CODGEO : [text] Code du département suivi du numéro de commune ou du numéro d’arrondissement municipal LIBGEO : [text] Libellé de la commune ou de l’arrondissement municipal pour Paris REG: [text] Région DEP : [text] Département ZAU : [text] Zonage en aire urbaine ZE : [text] Zone d’emploi P14_POP: [double] Population en 2014 P09_POP: [double] Population en 2009 SUPERF: [double] Superficie (en km2) NAIS0914: [double] Nombre de naissances entre le 01/01/2009 et le 01/01/2014 DECE0914: [double] Nombre de décès entre le 01/01/2009 et le 01/01/2014 P14_MEN: [double] Nombre de ménages en 2014 NAISD15: [double] Nombre de naissances domiciliées en 2015 DECESD15: [double] Nombre de décès domiciliés en 2015 P14_LOG: [double] Nombre de logements en 2014 P14_RP: [double] Nombre de résidences principales en 2014 P14_RSECOCC: [double] Nombre de résidences secondaires et logements occasionnels en 2014 P14_LOGVAC: [double] Nombre de logements vacants en 2014 P14_RP_PROP: [double] Nombre de résidences principales occupées par propriétaires en 2014 NBMENFISC13: [double] Nombre de ménages fiscaux en 2013 PIMP13: [text] Part des ménages fiscaux imposés en 2013 MED13: [double] Médiane du niveau de vie en 2013 TP6013: [text] Taux de pauvreté en 2013 P14_EMPLT: [double] Nombre d’emplois au lieu de travail en 2014 P14_EMPLT_SAL: [double] Nombre d’emplois salariés au lieu de travail en 2014 P09_EMPLT: [double] Nombre d’emplois au lieu de travail en 2009 P14_POP1564: [double] Nombre de personnes de 15 à 64 ans en 2014 P14_CHOM1564: [double] Nombre de chômeurs de 15 à 64 ans en 2014 P14_ACT1564: [double] Nombre de personnes actives de 15 à 64 ans en 2014 ETTOT14: [double] Total des établissements actifs au 31 décembre 2014 ETAZ14: [double] Etablissements actifs de l’agriculture, sylviculture et pêche au 31/12/2014 ETBE14: [double] Etablissements actifs de l’industrie au 31/12/2014 ETFZ14: [double] Etablissements actifs de la construction au 31/12/2014 ETGU14: [double] Etablissements actifs du commerce, transports et services divers au 31/12/2014 ETGZ14: [double] Etablissements actifs du commerce et réparation automobile au 31/12/2014 ETOQ14: [double] Etablissements actifs de l’administration publique, enseignement, santé et action sociale au 31/12/2014 ETTEF114: [double] Etablissements actifs de 1 à 9 salariés au 31 décembre 2014 ETTEFP1014: [double] Etablissements actifs de 10 salariés ou plus au 31 décembre 2014 "],["première-manipulation-des-données.html", "Chapitre 6 Première manipulation des données 6.1 Afficher les valeurs et manipuler les variables 6.2 Créer de nouvelles variables 6.3 Sélectionner des variables 6.4 Filtrer des observations 6.5 Les tests logiques dans R 6.6 Renommer des colonnes 6.7 Exercice 3 : créer, filtrer, sélectionner 6.8 Nom d’un pipe %&gt;% !", " Chapitre 6 Première manipulation des données library(&quot;dplyr&quot;) 6.1 Afficher les valeurs et manipuler les variables Pour afficher la table, plusieurs façons : “clic” dans l’environnement Rstudio, View(base), print(base), base. Pour accéder à une variable : fonction pull() Par exemple : str(pull(base, DEP)) ## chr [1:36689] &quot;01&quot; &quot;01&quot; &quot;01&quot; &quot;01&quot; &quot;01&quot; &quot;01&quot; &quot;01&quot; &quot;01&quot; &quot;01&quot; &quot;01&quot; &quot;01&quot; &quot;01&quot; ... 6.2 Créer de nouvelles variables La fonction mutate() permet de créer/modifier une variable (ou plusieurs). TableEnSortie &lt;- mutate(TableEnEntree, NouvelleVariable = DefinitionDeLaVariable) Par exemple : base &lt;- mutate(base, log_SUPERF = log(SUPERF)) Nb : mutate() permet également de modifier une variable. Dans ce cas la syntaxe est la même que ci-dessus, mais les noms d’entrée et de sortie sont les mêmes : base &lt;- mutate(base, log_SUPERF = 100 * log_SUPERF) \\(\\Rightarrow\\) La table base contient de nouvelles colonnes 6.3 Sélectionner des variables La fonction select() permet de sélectionner les variables voulues. sélection par liste blanche TableEnSortie &lt;- select(TableEnEntree, Variable1, Variable2, ..., VariableN) sélection par liste noire (supprimer) TableEnSortie &lt;- select(TableEnEntree, -Variable1, -Variable2, ..., -VariableN) Par exemple : base_select &lt;- select(base, CODGEO, LIBGEO, P14_POP) base_select &lt;- select(base, -CODGEO) 6.4 Filtrer des observations La fonction filter() permet de sélectionner les observations, selon une condition (ou plusieurs). TableEnSortie &lt;- filter(TableEnEntree, Condition1, ..., ConditionN) Par exemple : base_filter &lt;- filter(base, DEP == &quot;01&quot; &amp; P14_POP &gt; 10000) \\(\\Rightarrow\\) Attention à l’opérateur de comparaison : ” == ” et non pas “=” 6.5 Les tests logiques dans R Syntaxe Action == Test d’égalité != Différent de %in% c(...) Dans une liste de valeurs &gt;, &gt;= , &lt;, &lt;= Supérieur (ou inférieur) (ou égal) ! (x %in% c(...)) N’est pas dans une liste de valeurs TableEnSortie &lt;- filter(TableEnEntree, x==a &amp; y==b) # x vaut a **ET** y vaut b TableEnSortie &lt;- filter(TableEnEntree, x==a | y==b) # x vaut a **OU** y vaut b (barre verticale AltGR+6) 6.6 Renommer des colonnes La fonction rename() permet de renommer une variable (ou plusieurs). base &lt;- rename(base, nouveau_nom = ancien_nom) Exemple base_rename &lt;- rename(base, ZONE_EMPLOI = ZE) 6.7 Exercice 3 : créer, filtrer, sélectionner Nous travaillons toujours sur la même table des indicateurs au territoire, “extdata/Base_synth_territoires.csv”. A- En utilisant la fonction mutate(), créer une nouvelle variable correspondant à la densité de population (rapport de la population P14_POP à la superficie de la commune SUPERF), ainsi que les taux de natalité et de mortalité (en pour mille) B- A l’aide de la fonction select(), créer une nouvelle table en ne conservant que le code commune, le type de commune (ZAU), la région, le département et les variables que vous venez de créer. C-Enfin, ne conserver les communes correspondant à votre département de naissance et stocker ce dataframe. Attention au type de la variable département ! D- Avec les opérateurs logiques, faire des essais pour sélectionner des échantillons différents. Résultat attendu : 6.8 Nom d’un pipe %&gt;% ! Pour enchaîner des opérations, on peut créer des variables successives : df &lt;- mutate(base, densite = P14_POP / SUPERF, tx_natal = 1000 * NAISD15 / P14_POP, tx_mort = 1000 * DECESD15 / P14_POP) selection &lt;- select(df, CODGEO, ZAU, REG, DEP, densite, tx_natal) filtre_62 &lt;- filter(selection, DEP == &quot;62&quot;) Cela peut être relativement clair si on respecte de bonnes pratiques de nommage mais encombre inutilement l’environnement de travail. On peut emboîter les fonctions : selection_62 &lt;- filter(select(mutate(base, densite = P14_POP / SUPERF, tx_natal = 1000 * NAISD15 / P14_POP, tx_mort = 1000 * DECESD15 / P14_POP), CODGEO, ZAU, REG, DEP, densite, tx_natal), DEP == &quot;62&quot;) Ce choix préserve l’environnement de travail mais la lecture est particulièrement confuse et le risque d’oubli de parenthèses important. Il y a enfin une solution du package magrittr faisant partie du tidyverse. On peut combiner les opérations en une seule ligne à l’aide de l’opérateur pipe %&gt;% : selection_62 &lt;- base %&gt;% mutate(densite = P14_POP / SUPERF, tx_natal = 1000 * NAISD15 / P14_POP, tx_mort = 1000 * DECESD15 / P14_POP) %&gt;% select(CODGEO, ZAU, REG, DEP, densite, tx_natal) %&gt;% filter(DEP == &quot;62&quot;) Cette écriture permet d’enchaîner les opérations telles qu’on les décrirait à l’oral. L’objet auquel s’applique chaque nouvelle opération est le résultat de l’opération précédente. "],["premiers-traitements-statistiques.html", "Chapitre 7 Premiers traitements statistiques 7.1 Obtenir des informations 7.2 Calculer des statistiques spécifiques 7.3 Agréger des données 7.4 Tableau de contingence 7.5 Tableau de proportions 7.6 Exercice 4 : calcul de statistiques", " Chapitre 7 Premiers traitements statistiques 7.1 Obtenir des informations La fonction summary() peut s’appliquer à une table entière ou un vecteur. Appliquée sur un tableau, elle donne les statistiques principales sur chacune des variables, en s’adaptant au type de celles-ci (numerique ou texte). base_extrait &lt;- base %&gt;% select(1, 3, 5, 7:12) summary(base_extrait) ## CODGEO REG ZAU P14_POP ## Length:36689 Min. : 1.00 Length:36689 Min. : 0 ## Class :character 1st Qu.:28.00 Class :character 1st Qu.: 197 ## Mode :character Median :44.00 Mode :character Median : 444 ## Mean :52.05 Mean : 1838 ## 3rd Qu.:76.00 3rd Qu.: 1110 ## Max. :94.00 Max. :2220445 ## NA&#39;s :821 ## P09_POP SUPERF NAIS0914 DECE0914 ## Min. : 0 Min. : 0.04 Min. : 0.0 Min. : 0.00 ## 1st Qu.: 193 1st Qu.: 6.44 1st Qu.: 9.0 1st Qu.: 8.00 ## Median : 431 Median : 10.81 Median : 23.0 Median : 17.00 ## Mean : 1793 Mean : 17.64 Mean : 114.4 Mean : 77.35 ## 3rd Qu.: 1072 3rd Qu.: 18.58 3rd Qu.: 60.0 3rd Qu.: 43.00 ## Max. :2234105 Max. :18360.00 Max. :150843.0 Max. :69907.00 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 ## P14_MEN ## Min. : 0.0 ## 1st Qu.: 83.8 ## Median : 183.2 ## Mean : 802.0 ## 3rd Qu.: 454.9 ## Max. :1147990.9 ## NA&#39;s :821 Les variables quantitatives base_extrait %&gt;% pull(NAIS0914) %&gt;% summary() ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 0.0 9.0 23.0 114.4 60.0 150843.0 821 Les variables qualitatives base_extrait %&gt;% pull(ZAU) %&gt;% summary() ## Length Class Mode ## 36689 character character 7.2 Calculer des statistiques spécifiques Les fonctions sum(), mean(), median(), min(), max(), var(), sd()… résument l’information pour en donner une statistique. La fonction quantile() renvoie les quartiles de la variables (ou bien tout autre découpage qu’on lui renseigne). base_extrait %&gt;% pull(P14_POP) %&gt;% sum(na.rm = TRUE) ## [1] 65907160 base_extrait %&gt;% pull(P14_POP) %&gt;% mean(na.rm = TRUE) ## [1] 1837.492 base_extrait %&gt;% pull(P14_POP) %&gt;% median(na.rm = TRUE) ## [1] 444 base_extrait %&gt;% pull(P14_POP) %&gt;% quantile(probs = c(0.25, 0.5, 0.75), na.rm = TRUE) ## 25% 50% 75% ## 197 444 1110 Ces fonctions retournent une valeur, ou bien un ensemble de valeur (pour quantile()). Le résultat est donc un vecteur de un ou plusieurs nombres. 7.3 Agréger des données 7.3.1 Globalement La fonction summarise() permet d’agréger des données, en appliquant une fonction sur les variables pour construire une statistique sur les observations de la table. C’est une fonction dite de “résumé”. summarise(TableEnEntree, NomVariableAgregee = Fonction(NomVariableEtude)) base_med &lt;- base_extrait %&gt;% summarise(population_med = median(P14_POP, na.rm = T)) La fonction summarise() retourne un data.frame. 7.3.2 Selon un facteur La fonction summarise() couplée à group_by() permet de calculer des statistiques pour chaque modalité d’une variable qualitative. Avec group_by(), on précise les variables qui formeront des groupes, sur lesquels on appliquera une fonction : TableauGroupes &lt;- group_by(TableEnEntree, Variable1, ..., VariableN) %&gt;% summarise(NomVariableAgregee = Fonction (NomVariableEtude)) Par exemple, si on veut avoir la médiane de la variable P14_POP, pour chaque ZAU et chaque région : base_reg_ann &lt;- base_extrait %&gt;% group_by(ZAU, REG) %&gt;% summarise(population_med = median(P14_POP, na.rm = TRUE)) 7.4 Tableau de contingence La fonction table() calcule les effectifs d’un tableau croisé : t &lt;- base_extrait %&gt;% select(ZAU, REG) %&gt;% table() print(t) ## REG ## ZAU 1 2 3 4 11 24 ## 111 - Grand pôle (plus de 10 000 emplois) 17 16 3 10 413 103 ## 112 - Couronne d&#39;un grand pôle 6 0 3 3 853 734 ## 120 - Multipolarisée des grandes aires urbaines 1 4 0 4 3 188 ## 211 - Moyen pôle (5 000 à 10 000 emplois) 0 3 2 2 3 30 ## 212 - Couronne d&#39;un moyen pôle 0 0 0 0 2 72 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) 3 2 1 0 0 46 ## 222 - Couronne d&#39;un petit pôle 0 0 0 0 0 19 ## 300 - Autre commune multipolarisée 2 4 0 1 7 375 ## 400 - Commune isolée hors influence des pôles 3 5 13 4 0 275 ## REG ## ZAU 27 28 32 44 52 53 ## 111 - Grand pôle (plus de 10 000 emplois) 140 216 481 322 108 89 ## 112 - Couronne d&#39;un grand pôle 1299 1126 1505 1721 535 415 ## 120 - Multipolarisée des grandes aires urbaines 336 488 729 822 186 152 ## 211 - Moyen pôle (5 000 à 10 000 emplois) 31 34 33 54 23 47 ## 212 - Couronne d&#39;un moyen pôle 122 104 18 102 44 18 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) 60 78 54 89 69 42 ## 222 - Couronne d&#39;un petit pôle 137 29 18 118 8 1 ## 300 - Autre commune multipolarisée 737 762 711 1155 386 325 ## 400 - Commune isolée hors influence des pôles 969 396 289 815 143 181 ## REG ## ZAU 75 76 84 93 94 ## 111 - Grand pôle (plus de 10 000 emplois) 333 258 548 220 8 ## 112 - Couronne d&#39;un grand pôle 1161 1124 1484 229 99 ## 120 - Multipolarisée des grandes aires urbaines 254 333 390 69 3 ## 211 - Moyen pôle (5 000 à 10 000 emplois) 51 79 43 20 1 ## 212 - Couronne d&#39;un moyen pôle 81 155 84 11 2 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) 163 123 113 32 13 ## 222 - Couronne d&#39;un petit pôle 81 89 47 6 29 ## 300 - Autre commune multipolarisée 1002 877 517 107 53 ## 400 - Commune isolée hors influence des pôles 1379 1527 963 269 152 7.5 Tableau de proportions La fonction prop.table() prend en entrée un objet table (tableau de contingence avec les effectifs) et calcule les pourcentages (total, ligne, colonne) associés \\(\\rightarrow\\) ?prop.table # Calcule la fréquence en % (la somme de tous les pourcentages vaut 100) (prop.table(t) * 100) %&gt;% round(digits = 1) ## REG ## ZAU 1 2 3 4 11 24 27 ## 111 - Grand pôle (plus de 10 000 emplois) 0.0 0.0 0.0 0.0 1.1 0.3 0.4 ## 112 - Couronne d&#39;un grand pôle 0.0 0.0 0.0 0.0 2.3 2.0 3.5 ## 120 - Multipolarisée des grandes aires urbaines 0.0 0.0 0.0 0.0 0.0 0.5 0.9 ## 211 - Moyen pôle (5 000 à 10 000 emplois) 0.0 0.0 0.0 0.0 0.0 0.1 0.1 ## 212 - Couronne d&#39;un moyen pôle 0.0 0.0 0.0 0.0 0.0 0.2 0.3 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) 0.0 0.0 0.0 0.0 0.0 0.1 0.2 ## 222 - Couronne d&#39;un petit pôle 0.0 0.0 0.0 0.0 0.0 0.1 0.4 ## 300 - Autre commune multipolarisée 0.0 0.0 0.0 0.0 0.0 1.0 2.0 ## 400 - Commune isolée hors influence des pôles 0.0 0.0 0.0 0.0 0.0 0.7 2.6 ## REG ## ZAU 28 32 44 52 53 75 76 ## 111 - Grand pôle (plus de 10 000 emplois) 0.6 1.3 0.9 0.3 0.2 0.9 0.7 ## 112 - Couronne d&#39;un grand pôle 3.1 4.1 4.7 1.5 1.1 3.2 3.1 ## 120 - Multipolarisée des grandes aires urbaines 1.3 2.0 2.2 0.5 0.4 0.7 0.9 ## 211 - Moyen pôle (5 000 à 10 000 emplois) 0.1 0.1 0.1 0.1 0.1 0.1 0.2 ## 212 - Couronne d&#39;un moyen pôle 0.3 0.0 0.3 0.1 0.0 0.2 0.4 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) 0.2 0.1 0.2 0.2 0.1 0.4 0.3 ## 222 - Couronne d&#39;un petit pôle 0.1 0.0 0.3 0.0 0.0 0.2 0.2 ## 300 - Autre commune multipolarisée 2.1 1.9 3.1 1.1 0.9 2.7 2.4 ## 400 - Commune isolée hors influence des pôles 1.1 0.8 2.2 0.4 0.5 3.8 4.2 ## REG ## ZAU 84 93 94 ## 111 - Grand pôle (plus de 10 000 emplois) 1.5 0.6 0.0 ## 112 - Couronne d&#39;un grand pôle 4.0 0.6 0.3 ## 120 - Multipolarisée des grandes aires urbaines 1.1 0.2 0.0 ## 211 - Moyen pôle (5 000 à 10 000 emplois) 0.1 0.1 0.0 ## 212 - Couronne d&#39;un moyen pôle 0.2 0.0 0.0 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) 0.3 0.1 0.0 ## 222 - Couronne d&#39;un petit pôle 0.1 0.0 0.1 ## 300 - Autre commune multipolarisée 1.4 0.3 0.1 ## 400 - Commune isolée hors influence des pôles 2.6 0.7 0.4 # Calcule la fréquence en % par région (la somme de tous les pourcentages d&#39;une colonne vaut 100) (prop.table(t,&quot;REG&quot;) * 100) %&gt;% round(digits = 1) ## REG ## ZAU 1 2 3 4 11 24 ## 111 - Grand pôle (plus de 10 000 emplois) 53.1 47.1 13.6 41.7 32.2 5.6 ## 112 - Couronne d&#39;un grand pôle 18.8 0.0 13.6 12.5 66.6 39.8 ## 120 - Multipolarisée des grandes aires urbaines 3.1 11.8 0.0 16.7 0.2 10.2 ## 211 - Moyen pôle (5 000 à 10 000 emplois) 0.0 8.8 9.1 8.3 0.2 1.6 ## 212 - Couronne d&#39;un moyen pôle 0.0 0.0 0.0 0.0 0.2 3.9 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) 9.4 5.9 4.5 0.0 0.0 2.5 ## 222 - Couronne d&#39;un petit pôle 0.0 0.0 0.0 0.0 0.0 1.0 ## 300 - Autre commune multipolarisée 6.2 11.8 0.0 4.2 0.5 20.4 ## 400 - Commune isolée hors influence des pôles 9.4 14.7 59.1 16.7 0.0 14.9 ## REG ## ZAU 27 28 32 44 52 53 ## 111 - Grand pôle (plus de 10 000 emplois) 3.7 6.7 12.5 6.2 7.2 7.0 ## 112 - Couronne d&#39;un grand pôle 33.9 34.8 39.2 33.1 35.6 32.7 ## 120 - Multipolarisée des grandes aires urbaines 8.8 15.1 19.0 15.8 12.4 12.0 ## 211 - Moyen pôle (5 000 à 10 000 emplois) 0.8 1.1 0.9 1.0 1.5 3.7 ## 212 - Couronne d&#39;un moyen pôle 3.2 3.2 0.5 2.0 2.9 1.4 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) 1.6 2.4 1.4 1.7 4.6 3.3 ## 222 - Couronne d&#39;un petit pôle 3.6 0.9 0.5 2.3 0.5 0.1 ## 300 - Autre commune multipolarisée 19.2 23.6 18.5 22.2 25.7 25.6 ## 400 - Commune isolée hors influence des pôles 25.3 12.2 7.5 15.7 9.5 14.3 ## REG ## ZAU 75 76 84 93 94 ## 111 - Grand pôle (plus de 10 000 emplois) 7.4 5.7 13.1 22.8 2.2 ## 112 - Couronne d&#39;un grand pôle 25.8 24.6 35.4 23.8 27.5 ## 120 - Multipolarisée des grandes aires urbaines 5.6 7.3 9.3 7.2 0.8 ## 211 - Moyen pôle (5 000 à 10 000 emplois) 1.1 1.7 1.0 2.1 0.3 ## 212 - Couronne d&#39;un moyen pôle 1.8 3.4 2.0 1.1 0.6 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) 3.6 2.7 2.7 3.3 3.6 ## 222 - Couronne d&#39;un petit pôle 1.8 1.9 1.1 0.6 8.1 ## 300 - Autre commune multipolarisée 22.2 19.2 12.3 11.1 14.7 ## 400 - Commune isolée hors influence des pôles 30.6 33.5 23.0 27.9 42.2 Attention: la fonction prop.table() a été améliorée avec le changement de version de R base. La version &lt;3.6.2 ne permettait pas d’utiliser le nom de la variable (ici “REG”) pour spécifier le mode de calcul des fréquences, l’option était alors margin= (1: en ligne, 2: en colonne) 7.6 Exercice 4 : calcul de statistiques Nous continuons de travailler sur les indicateurs au territoire df avec les variables que nous avons calculées à l’exercice 3. 1- Utilisez la fonction summary() pour obtenir un résumé de l’ensemble des variables de la table df 2- Calculez maintenant les moyenne, médiane, écart-type et variance de la variable de densité de population. Que constatez-vous ? 3- Utilisez le paramètre na.rm = T pour gérer les valeurs manquantes 4- Calculez à présent les quartiles puis déciles de cette variable 5- Optionnel : calculez la version centrée réduite de la variable de densité Rappel sur la définition de centrer réduire. Avantage des variables centrées réduites : on élimine les effets d’unité (d’ordre de grandeur), et on peut donc comparer les distributions de deux variables qui ont des unités différentes (voir module 3). 6- Tableaux croisés : Calculez le nombre de communes par type d’espace à l’aide de la fonction table, et le pourcentage associé Calculez le nombre de communes par région et type d’espace, et les pourcentages associés Résultat attendu : ## CODGEO LIBGEO REG DEP ## Length:36689 Length:36689 44 : 5198 62 : 895 ## Class :character Class :character 76 : 4565 02 : 816 ## Mode :character Mode :character 75 : 4505 80 : 782 ## 84 : 4189 76 : 745 ## 32 : 3838 57 : 730 ## 27 : 3831 14 : 707 ## (Other):10563 (Other):32014 ## ZAU ## 112 - Couronne d&#39;un grand pôle :12297 ## 400 - Commune isolée hors influence des pôles : 7383 ## 300 - Autre commune multipolarisée : 7021 ## 120 - Multipolarisée des grandes aires urbaines: 3962 ## 111 - Grand pôle (plus de 10 000 emplois) : 3285 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) : 888 ## (Other) : 1853 ## ZE P14_POP P09_POP ## 0061 - Toulouse : 717 Min. : 0 Min. : 0 ## 2307 - Rouen : 501 1st Qu.: 197 1st Qu.: 193 ## 2210 - Amiens : 479 Median : 444 Median : 431 ## 7310 - Tarbes - Lourdes: 455 Mean : 1838 Mean : 1793 ## 2102 - Troyes : 452 3rd Qu.: 1110 3rd Qu.: 1072 ## 2603 - Dijon : 448 Max. :2220445 Max. :2234105 ## (Other) :33637 NA&#39;s :821 NA&#39;s :821 ## SUPERF NAIS0914 DECE0914 P14_MEN ## Min. : 0.04 Min. : 0.0 Min. : 0.00 Min. : 0.0 ## 1st Qu.: 6.44 1st Qu.: 9.0 1st Qu.: 8.00 1st Qu.: 83.8 ## Median : 10.81 Median : 23.0 Median : 17.00 Median : 183.2 ## Mean : 17.64 Mean : 114.4 Mean : 77.35 Mean : 802.0 ## 3rd Qu.: 18.58 3rd Qu.: 60.0 3rd Qu.: 43.00 3rd Qu.: 454.9 ## Max. :18360.00 Max. :150843.0 Max. :69907.00 Max. :1147990.9 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 ## NAISD15 DECESD15 P14_LOG P14_RP ## Min. : 0.00 Min. : 0.00 Min. : 0.0 Min. : 0.0 ## 1st Qu.: 1.00 1st Qu.: 1.00 1st Qu.: 115.0 1st Qu.: 83.8 ## Median : 4.00 Median : 3.00 Median : 239.1 Median : 183.2 ## Mean : 21.96 Mean : 16.47 Mean : 970.2 Mean : 802.0 ## 3rd Qu.: 11.00 3rd Qu.: 9.00 3rd Qu.: 565.0 3rd Qu.: 454.9 ## Max. :28267.00 Max. :13997.00 Max. :1362181.9 Max. :1147990.9 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 ## P14_RSECOCC P14_LOGVAC P14_RP_PROP NBMENFISC13 ## Min. : 0.00 Min. : 0.00 Min. : 0.0 Min. : 32.0 ## 1st Qu.: 7.00 1st Qu.: 8.00 1st Qu.: 68.4 1st Qu.: 102.0 ## Median : 19.00 Median : 18.00 Median : 148.0 Median : 205.0 ## Mean : 91.63 Mean : 76.60 Mean : 462.2 Mean : 809.7 ## 3rd Qu.: 49.29 3rd Qu.: 43.75 3rd Qu.: 349.2 3rd Qu.: 484.0 ## Max. :107061.99 Max. :107129.02 Max. :381934.3 Max. :1038789.0 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 NA&#39;s :3793 ## PIMP13 MED13 TP6013 P14_EMPLT ## Min. :24.46 Min. :10021 Min. : 5.00 Min. : 0.0 ## 1st Qu.:50.57 1st Qu.:18452 1st Qu.: 8.73 1st Qu.: 26.0 ## Median :58.40 Median :19844 Median :11.97 Median : 66.8 ## Mean :58.98 Mean :20250 Mean :13.35 Mean : 733.9 ## 3rd Qu.:67.19 3rd Qu.:21563 3rd Qu.:16.80 3rd Qu.: 229.5 ## Max. :89.38 Max. :46251 Max. :44.84 Max. :1801865.8 ## NA&#39;s :31598 NA&#39;s :3793 NA&#39;s :32531 NA&#39;s :821 ## P14_EMPLT_SAL P09_EMPLT P14_POP1564 ## Min. : 0.0 Min. : 0.0 Min. : 0.0 ## 1st Qu.: 13.0 1st Qu.: 26.1 1st Qu.: 120.3 ## Median : 42.0 Median : 65.2 Median : 275.0 ## Mean : 637.8 Mean : 716.4 Mean : 1165.0 ## 3rd Qu.: 173.4 3rd Qu.: 220.6 3rd Qu.: 684.8 ## Max. :1562078.5 Max. :1805470.4 Max. :1554076.1 ## NA&#39;s :821 NA&#39;s :9 NA&#39;s :821 ## P14_CHOM1564 P14_ACT1564 ETTOT14 ETAZ14 ## Min. : 0.00 Min. : 0.0 Min. : 0.0 Min. : 0.00 ## 1st Qu.: 8.85 1st Qu.: 90.5 1st Qu.: 19.0 1st Qu.: 4.00 ## Median : 20.45 Median : 208.3 Median : 38.0 Median : 7.00 ## Mean : 119.75 Mean : 855.8 Mean : 179.3 Mean : 11.36 ## 3rd Qu.: 51.78 3rd Qu.: 518.0 3rd Qu.: 92.0 3rd Qu.: 14.00 ## Max. :144515.41 Max. :1202565.3 Max. :551952.0 Max. :587.00 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :25 NA&#39;s :25 ## ETBE14 ETFZ14 ETGU14 ETGZ14 ## Min. : 0.000 Min. : 0.00 Min. : 0.0 Min. : 0.00 ## 1st Qu.: 1.000 1st Qu.: 2.00 1st Qu.: 7.0 1st Qu.: 1.00 ## Median : 3.000 Median : 5.00 Median : 17.0 Median : 4.00 ## Mean : 9.417 Mean : 18.18 Mean : 116.1 Mean : 28.73 ## 3rd Qu.: 7.000 3rd Qu.: 12.00 3rd Qu.: 47.0 3rd Qu.: 13.00 ## Max. :15181.000 Max. :24528.00 Max. :462763.0 Max. :65004.00 ## NA&#39;s :25 NA&#39;s :25 NA&#39;s :25 NA&#39;s :25 ## ETOQ14 ETTEF114 ETTEFP1014 densite ## Min. : 0.00 Min. : 0.00 Min. : 0.00 Min. : 0.00 ## 1st Qu.: 2.00 1st Qu.: 4.00 1st Qu.: 0.00 1st Qu.: 18.59 ## Median : 4.00 Median : 8.00 Median : 1.00 Median : 40.35 ## Mean : 24.22 Mean : 41.33 Mean : 10.28 Mean : 160.15 ## 3rd Qu.: 10.00 3rd Qu.: 19.00 3rd Qu.: 4.00 3rd Qu.: 94.57 ## Max. :48893.00 Max. :124131.00 Max. :24527.00 Max. :27126.14 ## NA&#39;s :25 NA&#39;s :25 NA&#39;s :25 NA&#39;s :821 ## tx_natal tx_mort ## Min. : 0.000 Min. : 0.000 ## 1st Qu.: 5.679 1st Qu.: 4.448 ## Median : 9.264 Median : 7.874 ## Mean : 9.699 Mean : 9.328 ## 3rd Qu.: 12.931 3rd Qu.: 12.389 ## Max. :111.111 Max. :157.738 ## NA&#39;s :827 NA&#39;s :827 ## [1] NA ## [1] NA ## [1] NA ## [1] NA ## [1] 160.151 ## [1] 722.799 ## [1] 40.35457 ## [1] 522438.4 ## 0% 25% 50% 75% 100% ## 0.00000 18.59047 40.35457 94.57430 27126.14108 ## [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 ## 0% 10% 20% 30% 40% 50% ## 0.00000 10.03439 15.65357 21.84208 29.76144 40.35457 ## 60% 70% 80% 90% 100% ## 54.82089 77.65199 119.08740 240.40789 27126.14108 ## ZAU ## 111 - Grand pôle (plus de 10 000 emplois) ## 3285 ## 112 - Couronne d&#39;un grand pôle ## 12297 ## 120 - Multipolarisée des grandes aires urbaines ## 3962 ## 211 - Moyen pôle (5 000 à 10 000 emplois) ## 456 ## 212 - Couronne d&#39;un moyen pôle ## 815 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) ## 888 ## 222 - Couronne d&#39;un petit pôle ## 582 ## 300 - Autre commune multipolarisée ## 7021 ## 400 - Commune isolée hors influence des pôles ## 7383 ## ZAU ## 111 - Grand pôle (plus de 10 000 emplois) ## 8.95 ## 112 - Couronne d&#39;un grand pôle ## 33.52 ## 120 - Multipolarisée des grandes aires urbaines ## 10.80 ## 211 - Moyen pôle (5 000 à 10 000 emplois) ## 1.24 ## 212 - Couronne d&#39;un moyen pôle ## 2.22 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) ## 2.42 ## 222 - Couronne d&#39;un petit pôle ## 1.59 ## 300 - Autre commune multipolarisée ## 19.14 ## 400 - Commune isolée hors influence des pôles ## 20.12 ## ZAU ## REG 111 - Grand pôle (plus de 10 000 emplois) 112 - Couronne d&#39;un grand pôle ## 01 17 6 ## 02 16 0 ## 03 3 3 ## 04 10 3 ## 11 413 853 ## 24 103 734 ## 27 140 1299 ## 28 216 1126 ## 32 481 1505 ## 44 322 1721 ## 52 108 535 ## 53 89 415 ## 75 333 1161 ## 76 258 1124 ## 84 548 1484 ## 93 220 229 ## 94 8 99 ## ZAU ## REG 120 - Multipolarisée des grandes aires urbaines ## 01 1 ## 02 4 ## 03 0 ## 04 4 ## 11 3 ## 24 188 ## 27 336 ## 28 488 ## 32 729 ## 44 822 ## 52 186 ## 53 152 ## 75 254 ## 76 333 ## 84 390 ## 93 69 ## 94 3 ## ZAU ## REG 211 - Moyen pôle (5 000 à 10 000 emplois) 212 - Couronne d&#39;un moyen pôle ## 01 0 0 ## 02 3 0 ## 03 2 0 ## 04 2 0 ## 11 3 2 ## 24 30 72 ## 27 31 122 ## 28 34 104 ## 32 33 18 ## 44 54 102 ## 52 23 44 ## 53 47 18 ## 75 51 81 ## 76 79 155 ## 84 43 84 ## 93 20 11 ## 94 1 2 ## ZAU ## REG 221 - Petit pôle (de 1 500 à 5 000 emplois) 222 - Couronne d&#39;un petit pôle ## 01 3 0 ## 02 2 0 ## 03 1 0 ## 04 0 0 ## 11 0 0 ## 24 46 19 ## 27 60 137 ## 28 78 29 ## 32 54 18 ## 44 89 118 ## 52 69 8 ## 53 42 1 ## 75 163 81 ## 76 123 89 ## 84 113 47 ## 93 32 6 ## 94 13 29 ## ZAU ## REG 300 - Autre commune multipolarisée ## 01 2 ## 02 4 ## 03 0 ## 04 1 ## 11 7 ## 24 375 ## 27 737 ## 28 762 ## 32 711 ## 44 1155 ## 52 386 ## 53 325 ## 75 1002 ## 76 877 ## 84 517 ## 93 107 ## 94 53 ## ZAU ## REG 400 - Commune isolée hors influence des pôles ## 01 3 ## 02 5 ## 03 13 ## 04 4 ## 11 0 ## 24 275 ## 27 969 ## 28 396 ## 32 289 ## 44 815 ## 52 143 ## 53 181 ## 75 1379 ## 76 1527 ## 84 963 ## 93 269 ## 94 152 ## ZAU ## REG 111 - Grand pôle (plus de 10 000 emplois) 112 - Couronne d&#39;un grand pôle ## 01 0.05 0.02 ## 02 0.04 0.00 ## 03 0.01 0.01 ## 04 0.03 0.01 ## 11 1.13 2.32 ## 24 0.28 2.00 ## 27 0.38 3.54 ## 28 0.59 3.07 ## 32 1.31 4.10 ## 44 0.88 4.69 ## 52 0.29 1.46 ## 53 0.24 1.13 ## 75 0.91 3.16 ## 76 0.70 3.06 ## 84 1.49 4.04 ## 93 0.60 0.62 ## 94 0.02 0.27 ## ZAU ## REG 120 - Multipolarisée des grandes aires urbaines ## 01 0.00 ## 02 0.01 ## 03 0.00 ## 04 0.01 ## 11 0.01 ## 24 0.51 ## 27 0.92 ## 28 1.33 ## 32 1.99 ## 44 2.24 ## 52 0.51 ## 53 0.41 ## 75 0.69 ## 76 0.91 ## 84 1.06 ## 93 0.19 ## 94 0.01 ## ZAU ## REG 211 - Moyen pôle (5 000 à 10 000 emplois) 212 - Couronne d&#39;un moyen pôle ## 01 0.00 0.00 ## 02 0.01 0.00 ## 03 0.01 0.00 ## 04 0.01 0.00 ## 11 0.01 0.01 ## 24 0.08 0.20 ## 27 0.08 0.33 ## 28 0.09 0.28 ## 32 0.09 0.05 ## 44 0.15 0.28 ## 52 0.06 0.12 ## 53 0.13 0.05 ## 75 0.14 0.22 ## 76 0.22 0.42 ## 84 0.12 0.23 ## 93 0.05 0.03 ## 94 0.00 0.01 ## ZAU ## REG 221 - Petit pôle (de 1 500 à 5 000 emplois) 222 - Couronne d&#39;un petit pôle ## 01 0.01 0.00 ## 02 0.01 0.00 ## 03 0.00 0.00 ## 04 0.00 0.00 ## 11 0.00 0.00 ## 24 0.13 0.05 ## 27 0.16 0.37 ## 28 0.21 0.08 ## 32 0.15 0.05 ## 44 0.24 0.32 ## 52 0.19 0.02 ## 53 0.11 0.00 ## 75 0.44 0.22 ## 76 0.34 0.24 ## 84 0.31 0.13 ## 93 0.09 0.02 ## 94 0.04 0.08 ## ZAU ## REG 300 - Autre commune multipolarisée ## 01 0.01 ## 02 0.01 ## 03 0.00 ## 04 0.00 ## 11 0.02 ## 24 1.02 ## 27 2.01 ## 28 2.08 ## 32 1.94 ## 44 3.15 ## 52 1.05 ## 53 0.89 ## 75 2.73 ## 76 2.39 ## 84 1.41 ## 93 0.29 ## 94 0.14 ## ZAU ## REG 400 - Commune isolée hors influence des pôles ## 01 0.01 ## 02 0.01 ## 03 0.04 ## 04 0.01 ## 11 0.00 ## 24 0.75 ## 27 2.64 ## 28 1.08 ## 32 0.79 ## 44 2.22 ## 52 0.39 ## 53 0.49 ## 75 3.76 ## 76 4.16 ## 84 2.62 ## 93 0.73 ## 94 0.41 Pour aller plus loin et ajouter des variables de pondération, calculer les profils-ligne ou profils-colonne, rendez-vous au module 3 “Statistiques descriptives” ou demander à un GF (Gentil Formateur). "],["premiers-graphiques.html", "Chapitre 8 Premiers graphiques 8.1 Package ggplot2 8.2 Histogramme 8.3 Nuages de points 8.4 Matrice de nuages 8.5 Bonus : faire un graphique “dynamique” 8.6 Exercice 5 : créer des graphiques", " Chapitre 8 Premiers graphiques 8.1 Package ggplot2 Pour réaliser des graphiques, nous choisissons de nous servir du package ggplot2, qui permet de faire de meilleures réalisations que les fonctions basiques. Il est intégré dans le méta-package tidyverse donc il n’est pas utile de le re-charger dans notre session. Mais si vous devez le faire, le code est le suivant : install.packages(&quot;ggplot2&quot;) library(ggplot2) library(dplyr) La fonction ggplot() fonctionne d’une manière particulière. La structure ressemble à ceci : ggplot(TableEnEntree, aes(VariablesATracer)) + geom_FonctionAChoisir() Pour découvrir les nombreuses possibilités de ggplot2, vous pouvez vous référer au Module 5 : « Valoriser ses données avec R » ou consulter les sites suivants : Version anglaise Version française La feuille de triche accessible depuis R Studio rassemble les principales instructions et aide à prendre en main le package : La fonction aes() (pour “aesthetics”), utilisée dans l’instruction ggplot() permet de définir les données à tracer. On y indique les dimensions que l’on veut représenter sur le graphique. On peut représenter jusqu’à 5 dimensions sur un même graphique, mais attention à la lisibilité ! 2 variables quanti : x en fonction de y \\(\\rightarrow\\) 2 dimensions (nuage de points) taille du point \\(\\rightarrow\\) 3e dimension (quanti) couleur des points \\(\\rightarrow\\) 4e dimension (quali) juxtaposer des graphiques en fonction d’une variable quali \\(\\rightarrow\\) 5e dimension ! 8.2 Histogramme Si on désire un histogramme de log_SUPERF, on fera appel à la fonction geom_histogram(). Ce graphique ne présente qu’une seule dimension (la variable quanti dont on veut visualiser la distribution) rm(list = ls()) base &lt;- read.csv(file = &quot;extdata/Base_synth_territoires.csv&quot;, fileEncoding = &#39;latin1&#39;, header = T, sep=&quot;;&quot;, dec=&quot;,&quot;) %&gt;% select(1:24) %&gt;% mutate(log_SUPERF = log(SUPERF), REG = as.factor(REG), densite = P14_POP / SUPERF, tx_natal = 1000 * NAISD15 / P14_POP, tx_mort = DECESD15 / P14_POP) ggplot(data = base, mapping = aes(x = log_SUPERF)) + geom_histogram() 8.3 Nuages de points Selon les graphiques que l’on veut tracer, on peut renseigner plusieurs variables. Dans le cas d’un nuage de points, par exemple, on croise 2 variables quantitatives : ggplot(base, aes(x = P14_EMPLT, y = MED13)) + geom_point(colour = &quot;blue&quot;) ggplot(base, aes(x = log(P14_EMPLT), y = log(MED13))) + geom_point(colour = &quot;blue&quot;) 8.4 Matrice de nuages Pour explorer son jeu de données, on peut réaliser un nuage de points pour plusieurs croisements de variables possibles. Ici, en conservant quelques variables quantitatives, on peut réaliser un ensemble de graphiques. Cette “matrice” de nuages fonctionne avec le package GGally. # install.packages(&quot;GGally&quot;) library(&quot;GGally&quot;) num &lt;- select(base, P14_LOGVAC:PIMP13) %&gt;% sample_n(10000) %&gt;% log() ggpairs(num) ## fonction ggpairs() de GGally 8.5 Bonus : faire un graphique “dynamique” Une fois qu’on a généré un graphique avec ggplot, on peut le passer dans la fonction ggplotly() (package plotly) qui permet de le rendre dynamique. library(plotly) g &lt;- ggplot(data = base, aes(x = ZAU, fill = ZAU)) + geom_bar() ggplotly(g) 8.6 Exercice 5 : créer des graphiques Nous travaillons toujours sur le dataset df calculé à l’exercice précédent. À l’aide de l’aide mémoire ggplot2 : Réaliser un histogramme de la population communale Transformer les données avec la fonction log pour y voir plus clair Faire un barplot (qui n’est pas un histogramme !!!!) du nombre de communes par REG. Utiliser le paramètre fill de la fonction aes() pour améliorer le graphique Réaliser un graphique (nuage de points) croisant la densité de population et le taux de mortalité Ajouter une dimension supplémentaire avec la couleur des points (paramètre color de aes()) Résultat attendu : Note : avec les fonctions de base, on peut obtenir de nombreux graphiques avec très peu de code, mais moins jolis : plot(iris) Des possibilités infinies à approfondir dans les modules 3 et 5 !! "],["sauvegarder-son-travail.html", "Chapitre 9 Sauvegarder son travail 9.1 Exportation des résultats 9.2 Environnement et .RData", " Chapitre 9 Sauvegarder son travail Après avoir réalisé ces traitements, on peut exporter son travail afin de le finaliser dans un tableur ou un traitement de texte en vue d’une publication ou autre. On peut donc avoir à exporter soit des tableaux qu’on retouchera par la suite, soit des images de ses graphiques qu’on intégrera dans un document. Une dernière possibilité consiste à sauvegarder un ensemble d’objets R dans un seul fichier (RData) afin de retrouver son environnement de travail facilement en rouvrant une session de R. 9.1 Exportation des résultats Exporter une table en csv res &lt;- summary(base) write.table(x = res, file = &#39;outputs/resultat_R.csv&#39;, sep = &#39;;&#39;, row.names = FALSE) # row.names=F pour éviter un décalage entre première ligne et les suivantes write.table(x = base, file = &#39;outputs/base_R.csv&#39;, sep = &#39;;&#39;, row.names = FALSE) Exporter un graphique pour l’intégrer à un document png(&#39;outputs/mongraphe.png&#39;) # Alloue et ouvre le fichier où inscrire le graphe ggplot(base, aes(x = P14_EMPLT, y = MED13)) + geom_point(colour = &quot;blue&quot;) dev.off() # Ferme le fichier \\(\\rightarrow\\) Beaucoup d’autres fonctions : jpeg, pdf, postscript, svg… 9.2 Environnement et .RData Il est possible de sauvegarder des objets R (dataframe, vecteur, etc…) directement sur son ordinateur. Une liste d’objets R est enregistrée sous le format .RData. save(list = ls(), file = &quot;outputs/env_entier.RData&quot;) # sauvegarde de tout l&#39;environnement sur le répertoire choisi rm(list = ls()) # suppression de notre environnement dans R load(&quot;outputs/env_entier.RData&quot;) # chargement de l&#39;environnement stocké sur l&#39;ordinateur save(base, res, file = &quot;outputs/petit_env.RData&quot;) # sauvegarde des éléments base et V1 rm(list = ls()) # suppression de notre environnement load(&quot;outputs/petit_env.RData&quot;) Avantages - Un seul fichier peut contenir des dataframes, des graphiques, des fonctions, etc. - La lecture est très rapide \\(\\Rightarrow\\) utile pour les gros volumes de données "],["aller-plus-loin-avec-les-objets-et-la-programmation-fonctionnelle.html", "Chapitre 10 Aller plus loin avec les objets et la programmation fonctionnelle 10.1 Les objets dans R, plus de détails 10.2 Créer une nouvelle fonction en R 10.3 Les boucles conditionnelles 10.4 Les boucles 10.5 Pour aller plus loin", " Chapitre 10 Aller plus loin avec les objets et la programmation fonctionnelle Ce qui a été présenté dans ce module repose sur les fonctions du package tidyverse. Cette approche tend à se généraliser depuis quelques années, mais quand on cherche la réponse à un problème sur Internet, on trouve d’autres façons de programmer en R, qui font appel aux fonctions du package base et non du tidyverse \\(\\Rightarrow\\) Cette partie donne quelques clés de compréhension. 10.1 Les objets dans R, plus de détails Rappel : en informatique, un objet est défini par : ses attributs et ses méthodes (fonctions). Dans l’exemple du jeu d’échec, chaque pièce peut être vue comme un objet : sa position sur le plateau constitue ses attributs sa façon de se déplacer peut être vue comme une fonction qui ne s’applique qu’à ce type de pièce, donc une méthode R est un langage orienté objet ; ces objets permettent de structurer les données selon leurs caractéristiques \\(\\Rightarrow\\) on retrouve les données dans les attributs. Les méthodes sont en général transparentes pour l’utilisateur (cf. utilisation des fonctions summary, plot…). Les objets les plus courants sont les suivants : Vecteurs : suite unidimensionnelle de valeurs ayant le même type. Facteurs : vecteur qui prend un nombre limité de modalités (exemple : sexe). Il est défini par les niveaux (levels) et les libellés associés (labels). Matrice et arrays : suites multidimensionnelles de valeurs (matrices=dimension 2 ; array=dimension n). A la différence d’une dataframe, les valeurs d’une matrice sont toutes du même type. Les arrays peuvent être très puissants pour gérer des millésimes. Liste : ensemble d’objets différents. On peut stocker un vecteur alphanumérique + une matrice numérique dans une liste. Tableaux (data.frame) : Objet qui ressemble le plus aux tables Excel, SAS ou SPSS… : description d’individus statistiques (observations, en ligne) par des caractéristiques (variables, en colonnes). Fonctions : Objets particuliers qui donnent un résultat à partir de paramètres en entrée. Autres objets : Il existe un très grand nombre d’objets ad hoc dans R. Par exemple ts (time serie) pour les séries temporelles, lm (linear model) qui contient tous les résultats d’une régression linéraire… des graphiques On peut même en définir de nouveaux soi-même ! 10.2 Créer une nouvelle fonction en R La fonction est un objet comme les autres, qu’on crée avec l’opérateur d’affectation. Elle est définie par des paramètres et elle se termine par la fonction return(). On reprend l’exemple du calcul de l’IMC calcul_IMC &lt;- function (poids, taille) { ## La taille est exprimée en mètres imc &lt;- poids / taille ^ 2 return (imc) } calcul_IMC (poids = 80, taille = 1.89) ## [1] 22.39579 calcul_IMC (poids = 60, taille = 1.55) ## [1] 24.97399 10.3 Les boucles conditionnelles Les commandes if et else sont bien entendues utilisables. Le “then” n’existe pas : il est implicite après les accolades. diag_IMC &lt;- function(poids,taille) { imc &lt;- poids / taille ^ 2 if (imc &lt; 18.5) {diag &lt;- &quot;maigre&quot;} else if (imc &lt; 25) {diag &lt;- &quot;normal&quot;} else {diag &lt;- &quot;surpoids&quot;} return (diag) } diag_IMC (poids=60,taille=1.89) ## [1] &quot;maigre&quot; diag_IMC (poids=80,taille=1.89) ## [1] &quot;normal&quot; diag_IMC (poids=80,taille=1.55) ## [1] &quot;surpoids&quot; 10.4 Les boucles On peut utiliser les boucles classiques : repeat, while, for : for (pp in seq(from = 50, to = 100, by = 5)) { print(paste (&quot;Taille = 1,70m, poids =&quot;, pp, &quot;Diagnotic :&quot;, diag_IMC (poids = pp, taille = 1.70))) } ## [1] &quot;Taille = 1,70m, poids = 50 Diagnotic : maigre&quot; ## [1] &quot;Taille = 1,70m, poids = 55 Diagnotic : normal&quot; ## [1] &quot;Taille = 1,70m, poids = 60 Diagnotic : normal&quot; ## [1] &quot;Taille = 1,70m, poids = 65 Diagnotic : normal&quot; ## [1] &quot;Taille = 1,70m, poids = 70 Diagnotic : normal&quot; ## [1] &quot;Taille = 1,70m, poids = 75 Diagnotic : surpoids&quot; ## [1] &quot;Taille = 1,70m, poids = 80 Diagnotic : surpoids&quot; ## [1] &quot;Taille = 1,70m, poids = 85 Diagnotic : surpoids&quot; ## [1] &quot;Taille = 1,70m, poids = 90 Diagnotic : surpoids&quot; ## [1] &quot;Taille = 1,70m, poids = 95 Diagnotic : surpoids&quot; ## [1] &quot;Taille = 1,70m, poids = 100 Diagnotic : surpoids&quot; 10.5 Pour aller plus loin 10.5.1 matrices et arrays Les matrices et les arrays permettent des calculs rapides et efficaces, et peuvent être très pratiques et optimisent le stockage des données. Ils demandent cependant plus de réflexion en amont quant à leur utilisation. On accède aux éléments avec les []. Un hypercube de trois dimensions peut être représenté comme suit : On peut par exemple créer une matrice à 10 lignes et 10 colonnes remplie avec un tirage aléatoire selon une loi normale centrée réduit. De la même façon on peut créer un hypercube avec la fonction avec 10 lignes, 5 colonnes et de profondeur 3, toujours avec un tirage aléatoire selon une loi normale mat &lt;- matrix(rnorm(50), ncol = 5, nrow = 10) arr &lt;- array(rnorm(150),dim = c(10,5,3)) mat ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1.8298970 1.9155237 -0.89170744 -1.38393491 0.33090038 ## [2,] -0.5859457 0.2704362 -1.39684058 0.33790250 0.06794822 ## [3,] -0.9014928 0.4969728 -1.30396452 0.55950906 -0.06483164 ## [4,] 0.4704234 0.5712386 -0.69828470 -0.31486558 -0.07120763 ## [5,] -0.9696539 -1.3090243 0.82188639 0.41390202 0.09632524 ## [6,] 0.7142647 -0.6392071 -1.10677379 0.56210125 0.08949779 ## [7,] 0.2615644 -1.5083266 0.06009281 0.78766302 0.79693897 ## [8,] 0.3533574 1.1150566 -0.61658806 2.43104459 -0.22886904 ## [9,] 0.1744039 -1.0749350 0.74073849 0.06538894 1.39909538 ## [10,] 0.7072237 -0.3094418 -0.28265838 0.32017082 -0.84729113 arr ## , , 1 ## ## [,1] [,2] [,3] [,4] [,5] ## [1,] 0.6289631 0.8099894 -0.11116094 -0.2195063 -0.25187189 ## [2,] -0.1508188 2.7805517 1.29514658 0.3235999 -0.28332410 ## [3,] -0.4489119 2.4587440 -1.30199048 -0.7219475 -0.04622427 ## [4,] -0.7229349 -1.4175480 -0.07993031 -0.2183211 1.51428455 ## [5,] 1.2091629 -0.2882699 0.80760717 -0.9319585 1.46395446 ## [6,] -1.0210656 0.2181453 -1.07549735 1.1639663 -0.15427057 ## [7,] 1.3410832 0.1973808 -0.55963879 1.3949682 -2.15301827 ## [8,] -1.1671814 2.4020150 -0.14959200 2.2635160 -0.69074344 ## [9,] -0.3898478 -0.7015050 -1.21863993 -1.3082619 0.11558265 ## [10,] 1.3900988 -0.7536617 -1.33658104 -0.2403796 -0.77709969 ## ## , , 2 ## ## [,1] [,2] [,3] [,4] [,5] ## [1,] 0.9500794 -0.8813329 0.3669647 0.4321616 0.2859256 ## [2,] -1.2320569 0.2199210 -1.9463721 0.6570434 -0.1430404 ## [3,] -0.2555368 -1.4525104 -1.5720584 -0.5714278 -1.3429734 ## [4,] 0.3659933 0.8261212 0.8552008 0.1107770 0.2433908 ## [5,] -1.0255099 0.1516270 -1.6463431 -0.8525100 0.0468298 ## [6,] -1.0205132 -1.6316776 0.8828802 -1.1884887 0.3727641 ## [7,] 0.8356102 1.4554968 0.6551278 1.1386203 1.4159557 ## [8,] -0.2545264 0.1411197 -0.6674148 -0.1536324 0.5049107 ## [9,] 0.1310065 -1.0324879 -0.1780315 0.9334523 0.5742045 ## [10,] -0.1392483 -1.1100389 -1.4535866 -0.2223382 -0.2249076 ## ## , , 3 ## ## [,1] [,2] [,3] [,4] [,5] ## [1,] -1.3167017 2.11030214 -1.1528532 -0.5298752 0.8166477 ## [2,] -0.9571713 -0.87435542 -0.5562974 -1.4299889 -1.6167667 ## [3,] -0.6079834 -0.48620405 2.2058089 -0.3564476 1.6470953 ## [4,] -0.1405643 -0.36072761 0.3855486 -0.7180859 -1.3371532 ## [5,] -1.2490883 -0.35843645 0.2616756 2.6912969 -1.1075974 ## [6,] -0.7770963 1.77955963 1.2171825 0.4254494 0.4728384 ## [7,] -0.3569483 0.47348166 -0.7015739 -0.5697856 0.3873735 ## [8,] 0.7865385 0.03720543 1.4801365 -0.9580305 0.8058474 ## [9,] 0.3899946 1.48809787 0.9552694 -2.8341642 -0.8581658 ## [10,] 0.3279757 -0.29919687 -0.9285252 0.3193689 -0.6322436 Pourquoi s’embêter avec ça ? Parce qu’on peut appliquer des fonctions facilement sur les lignes, colonnes et autres dimensions grâce à la fonction apply(). Exemple : résultats de validations croisées par bloc, simulations de loi selon différents paramètres. Et on calcule facilement des statistiques “marginales”. Par, exemple, sur une matrice, on peut calculer des statistiques par lignes : apply(mat, MARGIN = 1, FUN=mean) ## [1] 0.360135735 -0.261299878 -0.242761410 -0.008539187 -0.189312923 ## [6] -0.076023427 0.079586511 0.610800297 0.260938352 -0.082399366 Ou par colonnes : apply(mat, MARGIN = 2, FUN=mean) ## [1] 0.2054042 -0.0471707 -0.4674100 0.3778882 0.1568507 Sur notre hypercube de type array, on peut aussi calculer des stats sur ses différentes dimensions : apply (arr, MARGIN = 3, FUN=mean) ## [1] 0.05774114 -0.15290760 -0.05214668 apply (arr, MARGIN = c(2,3), FUN = mean) ## [,1] [,2] [,3] ## [1,] 0.06685476 -0.16447021 -0.3901045 ## [2,] 0.57058416 -0.33137620 0.3509726 ## [3,] -0.37302771 -0.47036331 0.3166372 ## [4,] 0.15056756 0.02836574 -0.3960263 ## [5,] -0.12627306 0.17330598 -0.1422124 10.5.2 Inspection d’un objet : la régression La régression linéaire consiste à exprimer une variable Y en fonction d’une variable X dans une fonction linéaire. C’est à dire qu’on cherche a et b tels que : \\[ Y = a \\cdot X + b + \\epsilon\\] où \\(\\epsilon\\) est le résidu de la régression. On utilise dans cet exemple la table des iris de Fisher, existant dans R base qu’il suffit d’appeler avec data(iris) (il existe d’autres dataframe inclus dans les packages et qui sont utilisés en exemple dans l’aide). data (&quot;iris&quot;) str (iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... Faire la régression de la Sepal.Length sur Petal.length à l’aide de la fonction lm() lm (data = iris, formula = Sepal.Length ~ Petal.Length) ## ## Call: ## lm(formula = Sepal.Length ~ Petal.Length, data = iris) ## ## Coefficients: ## (Intercept) Petal.Length ## 4.3066 0.4089 On a les paramètres a et b mais on aimerait en savoir plus… Au moins la qualité d’ajustement (le \\(R^2\\) par exemple), et un graphique des résidus pour détecter une éventuelle structure. Pour cela, stocker le résultat dans un nouvel objet, et explorez-le avec les fonctions str(), summary() et plot() reg &lt;- lm(data = iris, formula = Sepal.Length ~ Petal.Length) str (reg) ## List of 12 ## $ coefficients : Named num [1:2] 4.307 0.409 ## ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;(Intercept)&quot; &quot;Petal.Length&quot; ## $ residuals : Named num [1:150] 0.2209 0.0209 -0.1382 -0.32 0.1209 ... ## ..- attr(*, &quot;names&quot;)= chr [1:150] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ effects : Named num [1:150] -71.566 8.812 -0.155 -0.337 0.104 ... ## ..- attr(*, &quot;names&quot;)= chr [1:150] &quot;(Intercept)&quot; &quot;Petal.Length&quot; &quot;&quot; &quot;&quot; ... ## $ rank : int 2 ## $ fitted.values: Named num [1:150] 4.88 4.88 4.84 4.92 4.88 ... ## ..- attr(*, &quot;names&quot;)= chr [1:150] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ assign : int [1:2] 0 1 ## $ qr :List of 5 ## ..$ qr : num [1:150, 1:2] -12.2474 0.0816 0.0816 0.0816 0.0816 ... ## .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. ..$ : chr [1:150] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## .. .. ..$ : chr [1:2] &quot;(Intercept)&quot; &quot;Petal.Length&quot; ## .. ..- attr(*, &quot;assign&quot;)= int [1:2] 0 1 ## ..$ qraux: num [1:2] 1.08 1.1 ## ..$ pivot: int [1:2] 1 2 ## ..$ tol : num 1e-07 ## ..$ rank : int 2 ## ..- attr(*, &quot;class&quot;)= chr &quot;qr&quot; ## $ df.residual : int 148 ## $ xlevels : Named list() ## $ call : language lm(formula = Sepal.Length ~ Petal.Length, data = iris) ## $ terms :Classes &#39;terms&#39;, &#39;formula&#39; language Sepal.Length ~ Petal.Length ## .. ..- attr(*, &quot;variables&quot;)= language list(Sepal.Length, Petal.Length) ## .. ..- attr(*, &quot;factors&quot;)= int [1:2, 1] 0 1 ## .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. ..$ : chr [1:2] &quot;Sepal.Length&quot; &quot;Petal.Length&quot; ## .. .. .. ..$ : chr &quot;Petal.Length&quot; ## .. ..- attr(*, &quot;term.labels&quot;)= chr &quot;Petal.Length&quot; ## .. ..- attr(*, &quot;order&quot;)= int 1 ## .. ..- attr(*, &quot;intercept&quot;)= int 1 ## .. ..- attr(*, &quot;response&quot;)= int 1 ## .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: R_GlobalEnv&gt; ## .. ..- attr(*, &quot;predvars&quot;)= language list(Sepal.Length, Petal.Length) ## .. ..- attr(*, &quot;dataClasses&quot;)= Named chr [1:2] &quot;numeric&quot; &quot;numeric&quot; ## .. .. ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;Sepal.Length&quot; &quot;Petal.Length&quot; ## $ model :&#39;data.frame&#39;: 150 obs. of 2 variables: ## ..$ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## ..$ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## ..- attr(*, &quot;terms&quot;)=Classes &#39;terms&#39;, &#39;formula&#39; language Sepal.Length ~ Petal.Length ## .. .. ..- attr(*, &quot;variables&quot;)= language list(Sepal.Length, Petal.Length) ## .. .. ..- attr(*, &quot;factors&quot;)= int [1:2, 1] 0 1 ## .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. ..$ : chr [1:2] &quot;Sepal.Length&quot; &quot;Petal.Length&quot; ## .. .. .. .. ..$ : chr &quot;Petal.Length&quot; ## .. .. ..- attr(*, &quot;term.labels&quot;)= chr &quot;Petal.Length&quot; ## .. .. ..- attr(*, &quot;order&quot;)= int 1 ## .. .. ..- attr(*, &quot;intercept&quot;)= int 1 ## .. .. ..- attr(*, &quot;response&quot;)= int 1 ## .. .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: R_GlobalEnv&gt; ## .. .. ..- attr(*, &quot;predvars&quot;)= language list(Sepal.Length, Petal.Length) ## .. .. ..- attr(*, &quot;dataClasses&quot;)= Named chr [1:2] &quot;numeric&quot; &quot;numeric&quot; ## .. .. .. ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;Sepal.Length&quot; &quot;Petal.Length&quot; ## - attr(*, &quot;class&quot;)= chr &quot;lm&quot; summary (reg) ## ## Call: ## lm(formula = Sepal.Length ~ Petal.Length, data = iris) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.24675 -0.29657 -0.01515 0.27676 1.00269 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.30660 0.07839 54.94 &lt;2e-16 *** ## Petal.Length 0.40892 0.01889 21.65 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4071 on 148 degrees of freedom ## Multiple R-squared: 0.76, Adjusted R-squared: 0.7583 ## F-statistic: 468.6 on 1 and 148 DF, p-value: &lt; 2.2e-16 plot (reg) Les méthodes summary, print et plot sont implémentées pour tous les objets en R, et on peut les utiliser pour avoir un premier aperçu de ce que l’on obtient avec la fonction. "],["exercices-corrigés.html", "Chapitre 11 Exercices corrigés 11.1 Manipulation 1 : Prendre en main RStudio (10 min.) 11.2 Manipulation 2 : Faire ses premiers calculs (15 min.) 11.3 Exercice 1 : Créer ses premières variables (15 min.) 11.4 Manipulation 3 : Créer son premier script (20 min.) 11.5 Exercice 2 : - importer des données et premier coup d’oeil 11.6 Exercice 3 : - créer, filtrer, sélectionner 11.7 Exercice 4 : calcul de statistiques 11.8 Exercice 5 : créer des graphiques", " Chapitre 11 Exercices corrigés 11.1 Manipulation 1 : Prendre en main RStudio (10 min.) Depuis le gestionnaire de fichier de RStudio (panneau bas-droite), vous allez créer un dossier qui va servir de dossier de travail au cours de la formation. Pour cela : utilisez le bouton New folder (expl. Formation_R). Pour définir ce dossier comme répertoire de travail de R, sélectionnez-le et allez dans le menu More/Set as working directory. Regardez ce qui se passe dans la console (panneau bas gauche). Qu’est-ce que cela signifie ? Si vous voulez avoir plus de renseignements sur la fonction setwd, vous pouvez utiliser l’aide en ligne de R en écrivant ?setwd ou help(setwd) dans la console. Qu’est ce passe-t-il ? Dans l’onglet Help de RStudio, vous pouvez également faire une recherche à partir du moteur de recherche. Essayez d’obtenir des informations sur la fonction dir(). 11.2 Manipulation 2 : Faire ses premiers calculs (15 min.) Dans la console, faite des calculs simples : 2 + 3, 5 * 4, 5 + (6 * 4), 2.5 * 1.3, 3**3 Que se passe-t-il lorsque vous écrivez pi dans la console ? Qu’est-ce que cela signifie ? Calculez maintenant cos(pi) et sin(pi/2). Que voyez-vous apparaître au moment où vous écrivez ces fonctions ? Faites maintenant la moyenne des nombres : 4, 5, 2, 1. Avez-vous utilisé un calcul ou une fonction de R ? Calculez la valeur absolue de l’opération 2 – 6. Calculez maintenant round(2.125412). Que voyez-vous ? Comment pouvez-vous faire pour faire un arrondi de 2.125412 à deux chiffres après la virgule (vous pouvez utiliser l’aide de R). Que se passe-t-il lorsque vous manipulez les flèches haut et bas depuis la console ? 11.3 Exercice 1 : Créer ses premières variables (15 min.) Dans la console, créer deux variables numériques a et b de valeur 5 et 4 par assignation : a &lt;- 5 et b &lt;- 4 Que se passe-t-il dans le panneau Environnement (en haut à droite) ? Faites maintenant un calcul avec ces variables comme a+b et a*b. Vous allez ensuite créer une troisième variable à partir d’un calcul sur les deux premières : c &lt;- a + 3 * b Vous pouvez afficher la liste des variables avec la fonction ls(). Modifiez maintenant la valeur de a en lui donnant la valeur 10. Vérifiez votre ré-assignation dans la panneau Environement. Créez une variable chaîne de caractère : t &lt;- 'texte' (vous pouvez également utiliser les doubles quotes comme “texte” mais ne les mélangez pas). Concaténez (mettez bout à bout) a et t avec la fonction paste(a, t). Que constatez-vous ? Pour plus de renseignements sur la fonction paste(), pensez à utiliser l’aide de R avec help(paste). Créez maintenant les variables A &lt;- 15 et B &lt;- 12. Que voyez-vous dans la panneau Environement ? Vous pouvez supprimer la variables A et B en utilisant la fonction rm() (utilisez l’aide de R pour avoir plus de renseignements sur la fonction rm). Résultat attendu : a &lt;- 5 a ## [1] 5 b &lt;- 4 b ## [1] 4 a + b ## [1] 9 a * b ## [1] 20 c &lt;- a + 3 * b c ## [1] 17 ls() ## [1] &quot;a&quot; &quot;arr&quot; &quot;b&quot; &quot;base&quot; &quot;c&quot; ## [6] &quot;calcul_IMC&quot; &quot;df&quot; &quot;diag_IMC&quot; &quot;g&quot; &quot;iris&quot; ## [11] &quot;mat&quot; &quot;num&quot; &quot;pp&quot; &quot;reg&quot; a &lt;- 10 c ## [1] 17 t &lt;- &#39;texte&#39; t ## [1] &quot;texte&quot; paste(a, t) ## [1] &quot;10 texte&quot; help(paste) A &lt;- 15 B &lt;- 12 rm(A, B) 11.4 Manipulation 3 : Créer son premier script (20 min.) Depuis le panneau d’édition de script de RStudio (en haut à gauche), vous allez créer un script ré-utilisable permettant de calculer l’indice de masse corporelle d’un individu (IMC) et d’afficher le résultat dans la console sous la forme d’un phrase explicite. L’IMC est calculé par la masse sur la taille au carré d’un individu (\\(masse / taille^2\\)). Quelques petits conseils : de façon générale, n’hésitez pas à commenter votre script pour vous aider à le comprendre lorsque vous serez amené à le reprendre, pensez à bien assigner vos variables poids et taille pour une meilleure ré-utilisabilité du script, la fonction print() permet d’afficher une chaîne de caractères dans la console, pensez à arrondir le résultat de votre calcul d’IMC. Enregistrez ensuite votre script dans votre répertoire de travail. L’extension d’un fichier script pour R est .R. 11.5 Exercice 2 : - importer des données et premier coup d’oeil Nous travaillons sur des indicateurs au territoire : “extdata/Base_synth_territoires.csv”, extraits de l’outil GEOIDD du ministère et exportés en csv. Utiliser la fonction read.csv() pour importer ce fichier et le stocker dans un objet df. Veillez à ce que la région soit bien importée comme un facteur et non un entier. Inspecter le dataframe avec les fonctions vues auparavant. Résultat attendu : df &lt;- read.csv(file = &quot;extdata/Base_synth_territoires.csv&quot;, header = TRUE, sep = &quot;;&quot;, dec = &quot;,&quot;, colClasses = c(rep(&quot;character&quot;, 2), rep(&quot;factor&quot;, 4) , rep(NA, 32))) str(df) ## &#39;data.frame&#39;: 36689 obs. of 38 variables: ## $ CODGEO : chr &quot;01001&quot; &quot;01002&quot; &quot;01004&quot; &quot;01005&quot; ... ## $ LIBGEO : chr &quot;L&#39;Abergement-Clémenciat&quot; &quot;L&#39;Abergement-de-Varey&quot; &quot;Ambérieu-en-Bugey&quot; &quot;Ambérieux-en-Dombes&quot; ... ## $ REG : Factor w/ 17 levels &quot;01&quot;,&quot;02&quot;,&quot;03&quot;,..: 15 15 15 15 15 15 15 15 15 15 ... ## $ DEP : Factor w/ 100 levels &quot;01&quot;,&quot;02&quot;,&quot;03&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ ZAU : Factor w/ 9 levels &quot;111 - Grand pôle (plus de 10 000 emplois)&quot;,..: 3 2 2 2 8 2 2 5 8 2 ... ## $ ZE : Factor w/ 321 levels &quot;0050 - Mont-de-Marsan&quot;,..: 260 248 248 260 263 248 248 263 266 250 ... ## $ P14_POP : int 767 239 14022 1627 109 2570 743 338 1142 397 ... ## $ P09_POP : int 787 207 13350 1592 120 2328 660 336 960 352 ... ## $ SUPERF : num 15.95 9.15 24.6 15.92 5.88 ... ## $ NAIS0914 : int 40 16 1051 117 8 175 59 12 56 25 ... ## $ DECE0914 : int 25 7 551 41 3 78 20 11 32 10 ... ## $ P14_MEN : num 306 99.3 6161.1 621.1 52.5 ... ## $ NAISD15 : int 13 5 222 15 2 21 11 2 18 4 ... ## $ DECESD15 : int 5 1 121 7 2 9 3 3 5 0 ... ## $ P14_LOG : num 342.7 161.2 6838.4 661.8 71.5 ... ## $ P14_RP : num 306 99.3 6161.1 621.1 52.5 ... ## $ P14_RSECOCC : num 14 47.3 121.6 10.9 10.9 ... ## $ P14_LOGVAC : num 22.74 14.55 555.64 29.85 8.14 ... ## $ P14_RP_PROP : num 260 84.6 2769 473.3 37.7 ... ## $ NBMENFISC13 : int 297 99 6034 617 47 1014 299 140 431 137 ... ## $ PIMP13 : num NA NA 57.4 NA NA ... ## $ MED13 : num 22130 23213 19554 22388 21872 ... ## $ TP6013 : num NA NA 15.1 NA NA ... ## $ P14_EMPLT : num 85.16 12.81 7452.93 280.57 5.95 ... ## $ P14_EMPLT_SAL: num 52.19 4.95 6743.37 206.38 3.96 ... ## $ P09_EMPLT : num 65.57 17.64 7551.68 286.61 5.29 ... ## $ P14_POP1564 : num 463 141.6 8962.8 1043.1 71.3 ... ## $ P14_CHOM1564 : num 33 9.84 1059.73 66.33 7.93 ... ## $ P14_ACT1564 : num 376 121 6681.9 842.1 57.5 ... ## $ ETTOT14 : int 47 22 1316 141 7 203 66 39 54 36 ... ## $ ETAZ14 : int 9 1 7 14 0 21 2 5 5 6 ... ## $ ETBE14 : int 2 3 60 7 0 18 0 2 6 4 ... ## $ ETFZ14 : int 5 1 131 19 0 21 9 1 13 3 ... ## $ ETGU14 : int 25 14 892 85 5 114 45 27 24 18 ... ## $ ETGZ14 : int 6 4 283 19 1 28 16 6 9 7 ... ## $ ETOQ14 : int 6 3 226 16 2 29 10 4 6 5 ... ## $ ETTEF114 : int 9 2 385 27 0 38 17 6 9 7 ... ## $ ETTEFP1014 : int 0 0 109 5 0 15 2 0 3 0 ... head(df) ## CODGEO LIBGEO REG DEP ## 1 01001 L&#39;Abergement-Clémenciat 84 01 ## 2 01002 L&#39;Abergement-de-Varey 84 01 ## 3 01004 Ambérieu-en-Bugey 84 01 ## 4 01005 Ambérieux-en-Dombes 84 01 ## 5 01006 Ambléon 84 01 ## 6 01007 Ambronay 84 01 ## ZAU ZE ## 1 120 - Multipolarisée des grandes aires urbaines 8213 - Villefranche-sur-Saône ## 2 112 - Couronne d&#39;un grand pôle 8201 - Ambérieu-en-Bugey ## 3 112 - Couronne d&#39;un grand pôle 8201 - Ambérieu-en-Bugey ## 4 112 - Couronne d&#39;un grand pôle 8213 - Villefranche-sur-Saône ## 5 300 - Autre commune multipolarisée 8216 - Chambéry ## 6 112 - Couronne d&#39;un grand pôle 8201 - Ambérieu-en-Bugey ## P14_POP P09_POP SUPERF NAIS0914 DECE0914 P14_MEN NAISD15 DECESD15 ## 1 767 787 15.95 40 25 306.00000 13 5 ## 2 239 207 9.15 16 7 99.33745 5 1 ## 3 14022 13350 24.60 1051 551 6161.06200 222 121 ## 4 1627 1592 15.92 117 41 621.05374 15 7 ## 5 109 120 5.88 8 3 52.51818 2 2 ## 6 2570 2328 33.55 175 78 1028.00000 21 9 ## P14_LOG P14_RP P14_RSECOCC P14_LOGVAC P14_RP_PROP NBMENFISC13 PIMP13 ## 1 342.73473 306.00000 13.99418 22.740550 260.00000 297 NA ## 2 161.16023 99.33745 47.27625 14.546538 84.58436 99 NA ## 3 6838.35437 6161.06200 121.64795 555.644416 2769.00170 6034 57.41294 ## 4 661.76017 621.05374 10.85505 29.851387 473.32736 617 NA ## 5 71.51818 52.51818 10.85714 8.142857 37.65455 47 NA ## 6 1160.00000 1028.00000 56.00000 76.000000 779.00000 1014 62.35178 ## MED13 TP6013 P14_EMPLT P14_EMPLT_SAL P09_EMPLT P14_POP1564 ## 1 22130.00 NA 85.157286 52.191539 65.566193 463.00000 ## 2 23213.00 NA 12.814642 4.946329 17.644456 141.62963 ## 3 19554.00 15.11508 7452.926728 6743.374287 7551.682296 8962.84216 ## 4 22387.62 NA 280.569953 206.382233 286.611037 1043.12909 ## 5 21871.67 NA 5.945455 3.963636 5.285714 71.34545 ## 6 21650.67 NA 487.730918 372.758450 491.138876 1614.00000 ## P14_CHOM1564 P14_ACT1564 ETTOT14 ETAZ14 ETBE14 ETFZ14 ETGU14 ETGZ14 ETOQ14 ## 1 33.000000 376.00000 47 9 2 5 25 6 6 ## 2 9.835391 120.97531 22 1 3 1 14 4 3 ## 3 1059.728437 6681.86216 1316 7 60 131 892 283 226 ## 4 66.326127 842.14083 141 14 7 19 85 19 16 ## 5 7.927273 57.47273 7 0 0 0 5 1 2 ## 6 108.000000 1267.00000 203 21 18 21 114 28 29 ## ETTEF114 ETTEFP1014 ## 1 9 0 ## 2 2 0 ## 3 385 109 ## 4 27 5 ## 5 0 0 ## 6 38 15 tail(df) ## CODGEO LIBGEO REG DEP ## 36684 97419 Sainte-Rose 04 974 ## 36685 97420 Sainte-Suzanne 04 974 ## 36686 97421 Salazie 04 974 ## 36687 97422 Le Tampon 04 974 ## 36688 97423 Les Trois-Bassins 04 974 ## 36689 97424 Cilaos 04 974 ## ZAU ZE P14_POP ## 36684 400 - Commune isolée hors influence des pôles 0401 - L&#39;Est 6722 ## 36685 112 - Couronne d&#39;un grand pôle 0402 - Le Nord 22406 ## 36686 400 - Commune isolée hors influence des pôles 0401 - L&#39;Est 7132 ## 36687 111 - Grand pôle (plus de 10 000 emplois) 0404 - Le Sud 76796 ## 36688 112 - Couronne d&#39;un grand pôle 0403 - L&#39;Ouest 7198 ## 36689 400 - Commune isolée hors influence des pôles 0404 - Le Sud 5295 ## P09_POP SUPERF NAIS0914 DECE0914 P14_MEN NAISD15 DECESD15 P14_LOG ## 36684 6822 177.60 519 186 2322.000 94 43 2542.478 ## 36685 22437 57.84 1963 508 7686.912 358 100 8328.616 ## 36686 7406 103.82 661 235 2420.000 111 46 2987.000 ## 36687 72658 165.43 6663 2004 29662.460 1339 420 32710.091 ## 36688 7057 42.58 531 217 2484.887 104 54 2890.404 ## 36689 5989 84.40 430 186 2016.000 87 38 2732.690 ## P14_RP P14_RSECOCC P14_LOGVAC P14_RP_PROP NBMENFISC13 PIMP13 MED13 ## 36684 2322.000 28.58054 191.8979 1799.954 NA NA NA ## 36685 7686.912 50.94097 590.7629 4450.648 NA NA NA ## 36686 2420.000 174.00000 393.0000 1849.000 NA NA NA ## 36687 29662.460 1004.31703 2043.3140 15372.921 NA NA NA ## 36688 2484.887 67.58626 337.9313 1773.765 NA NA NA ## 36689 2016.000 239.56501 477.1253 1522.480 NA NA NA ## TP6013 P14_EMPLT P14_EMPLT_SAL P09_EMPLT P14_POP1564 P14_CHOM1564 ## 36684 NA 1272.841 920.0617 1269.573 4306.217 1250.516 ## 36685 NA 4296.362 3618.1538 4185.015 14821.042 3712.486 ## 36686 NA 1519.306 1090.0856 1533.305 4650.000 1369.000 ## 36687 NA 16145.620 12486.5465 14807.249 50316.640 12783.137 ## 36688 NA 1273.858 994.3469 1202.079 4850.570 1360.617 ## 36689 NA 1194.383 993.1546 1314.121 3461.457 1122.361 ## P14_ACT1564 ETTOT14 ETAZ14 ETBE14 ETFZ14 ETGU14 ETGZ14 ETOQ14 ETTEF114 ## 36684 2850.155 414 125 44 31 159 59 55 82 ## 36685 10456.196 1323 136 139 190 694 249 164 267 ## 36686 3108.000 490 148 29 43 214 73 56 95 ## 36687 34446.789 5476 565 398 665 3025 999 823 1032 ## 36688 3524.287 456 42 39 61 223 76 91 59 ## 36689 2415.666 360 49 17 35 193 49 66 65 ## ETTEFP1014 ## 36684 8 ## 36685 66 ## 36686 11 ## 36687 204 ## 36688 20 ## 36689 26 names(df) ## [1] &quot;CODGEO&quot; &quot;LIBGEO&quot; &quot;REG&quot; &quot;DEP&quot; ## [5] &quot;ZAU&quot; &quot;ZE&quot; &quot;P14_POP&quot; &quot;P09_POP&quot; ## [9] &quot;SUPERF&quot; &quot;NAIS0914&quot; &quot;DECE0914&quot; &quot;P14_MEN&quot; ## [13] &quot;NAISD15&quot; &quot;DECESD15&quot; &quot;P14_LOG&quot; &quot;P14_RP&quot; ## [17] &quot;P14_RSECOCC&quot; &quot;P14_LOGVAC&quot; &quot;P14_RP_PROP&quot; &quot;NBMENFISC13&quot; ## [21] &quot;PIMP13&quot; &quot;MED13&quot; &quot;TP6013&quot; &quot;P14_EMPLT&quot; ## [25] &quot;P14_EMPLT_SAL&quot; &quot;P09_EMPLT&quot; &quot;P14_POP1564&quot; &quot;P14_CHOM1564&quot; ## [29] &quot;P14_ACT1564&quot; &quot;ETTOT14&quot; &quot;ETAZ14&quot; &quot;ETBE14&quot; ## [33] &quot;ETFZ14&quot; &quot;ETGU14&quot; &quot;ETGZ14&quot; &quot;ETOQ14&quot; ## [37] &quot;ETTEF114&quot; &quot;ETTEFP1014&quot; class(df) ## [1] &quot;data.frame&quot; typeof(df) ## [1] &quot;list&quot; 11.6 Exercice 3 : - créer, filtrer, sélectionner Nous travaillons toujours sur la même table des indicateurs au territoire, “extdata/Base_synth_territoires.csv”. A- En utilisant la fonction mutate(), créer une nouvelle variable correspondant à la densité de population (rapport de la population P14_POP à la superficie de la commune SUPERF), ainsi que les taux de natalité et de mortalité (en pour mille) B- A l’aide de la fonction select(), créer une nouvelle table en ne conservant que le code commune, le type de commune (ZAU), la région, le département et les variables que vous venez de créer. C-Enfin, ne conserver les communes correspondant à votre département de naissance et stocker ce dataframe. Attention au type de la variable département ! D- Avec les opérateurs logiques, faire des essais pour sélectionner des échantillons différents. Résultat attendu : df &lt;- read.csv(file = &quot;extdata/Base_synth_territoires.csv&quot;, header = TRUE, sep = &quot;;&quot;, dec = &quot;,&quot;, colClasses = c(rep(&quot;character&quot;, 2), rep(&quot;factor&quot;, 4) , rep(NA, 32))) library(dplyr) # A df &lt;- df %&gt;% mutate(densite = P14_POP / SUPERF, tx_natal = 1000 * NAISD15 / P14_POP, tx_mort = 1000 * DECESD15 / P14_POP) # B selection &lt;- df %&gt;% select(CODGEO, ZAU, REG, DEP, densite, tx_natal, tx_mort) # C S0 &lt;- filter(selection, DEP == &quot;62&quot;) # D S1 &lt;- filter(selection, DEP != &quot;62&quot;) # tout sauf le 62 :( S2 &lt;- filter(selection, DEP %in% c(&quot;59&quot;, &quot;62&quot;)) # L&#39;ancien NPdC :) S3 &lt;- filter(selection, !(DEP %in% c(&quot;59&quot;, &quot;62&quot;))) # Le &quot;sud&quot; de la France S4 &lt;- filter(selection, densite &gt; 100) # l&#39;urbain S5 &lt;- filter(selection, DEP == &quot;62&quot; &amp; densite &gt; 100) # le PdC urbain S6 &lt;- filter(selection, DEP == &quot;62&quot; | densite &gt; 100) # le PdC et l&#39;urbain 11.7 Exercice 4 : calcul de statistiques Nous continuons de travailler sur les indicateurs au territoire df avec les variables que nous avons calculées à l’exercice 3. 1- Utilisez la fonction summary() pour obtenir un résumé de l’ensemble des variables de la table df 2- Calculez maintenant les moyenne, médiane, écart-type et variance de la variable de densité de population. Que constatez-vous ? 3- Utilisez le paramètre na.rm = T pour gérer les valeurs manquantes 4- Calculez à présent les quartiles puis déciles de cette variable 5- Optionnel : calculez la version centrée réduite de la variable de densité Rappel sur la définition de centrer réduire. Avantage des variables centrées réduites : on élimine les effets d’unité (d’ordre de grandeur), et on peut donc comparer les distributions de deux variables qui ont des unités différentes (voir module 3). 6- Tableaux croisés : Calculez le nombre de communes par type d’espace à l’aide de la fonction table, et le pourcentage associé Calculez le nombre de communes par région et type d’espace, et les pourcentages associés Résultat attendu : library(dplyr) # 1 summary(df) ## CODGEO LIBGEO REG DEP ## Length:36689 Length:36689 44 : 5198 62 : 895 ## Class :character Class :character 76 : 4565 02 : 816 ## Mode :character Mode :character 75 : 4505 80 : 782 ## 84 : 4189 76 : 745 ## 32 : 3838 57 : 730 ## 27 : 3831 14 : 707 ## (Other):10563 (Other):32014 ## ZAU ## 112 - Couronne d&#39;un grand pôle :12297 ## 400 - Commune isolée hors influence des pôles : 7383 ## 300 - Autre commune multipolarisée : 7021 ## 120 - Multipolarisée des grandes aires urbaines: 3962 ## 111 - Grand pôle (plus de 10 000 emplois) : 3285 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) : 888 ## (Other) : 1853 ## ZE P14_POP P09_POP ## 0061 - Toulouse : 717 Min. : 0 Min. : 0 ## 2307 - Rouen : 501 1st Qu.: 197 1st Qu.: 193 ## 2210 - Amiens : 479 Median : 444 Median : 431 ## 7310 - Tarbes - Lourdes: 455 Mean : 1838 Mean : 1793 ## 2102 - Troyes : 452 3rd Qu.: 1110 3rd Qu.: 1072 ## 2603 - Dijon : 448 Max. :2220445 Max. :2234105 ## (Other) :33637 NA&#39;s :821 NA&#39;s :821 ## SUPERF NAIS0914 DECE0914 P14_MEN ## Min. : 0.04 Min. : 0.0 Min. : 0.00 Min. : 0.0 ## 1st Qu.: 6.44 1st Qu.: 9.0 1st Qu.: 8.00 1st Qu.: 83.8 ## Median : 10.81 Median : 23.0 Median : 17.00 Median : 183.2 ## Mean : 17.64 Mean : 114.4 Mean : 77.35 Mean : 802.0 ## 3rd Qu.: 18.58 3rd Qu.: 60.0 3rd Qu.: 43.00 3rd Qu.: 454.9 ## Max. :18360.00 Max. :150843.0 Max. :69907.00 Max. :1147990.9 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 ## NAISD15 DECESD15 P14_LOG P14_RP ## Min. : 0.00 Min. : 0.00 Min. : 0.0 Min. : 0.0 ## 1st Qu.: 1.00 1st Qu.: 1.00 1st Qu.: 115.0 1st Qu.: 83.8 ## Median : 4.00 Median : 3.00 Median : 239.1 Median : 183.2 ## Mean : 21.96 Mean : 16.47 Mean : 970.2 Mean : 802.0 ## 3rd Qu.: 11.00 3rd Qu.: 9.00 3rd Qu.: 565.0 3rd Qu.: 454.9 ## Max. :28267.00 Max. :13997.00 Max. :1362181.9 Max. :1147990.9 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 ## P14_RSECOCC P14_LOGVAC P14_RP_PROP NBMENFISC13 ## Min. : 0.00 Min. : 0.00 Min. : 0.0 Min. : 32.0 ## 1st Qu.: 7.00 1st Qu.: 8.00 1st Qu.: 68.4 1st Qu.: 102.0 ## Median : 19.00 Median : 18.00 Median : 148.0 Median : 205.0 ## Mean : 91.63 Mean : 76.60 Mean : 462.2 Mean : 809.7 ## 3rd Qu.: 49.29 3rd Qu.: 43.75 3rd Qu.: 349.2 3rd Qu.: 484.0 ## Max. :107061.99 Max. :107129.02 Max. :381934.3 Max. :1038789.0 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 NA&#39;s :3793 ## PIMP13 MED13 TP6013 P14_EMPLT ## Min. :24.46 Min. :10021 Min. : 5.00 Min. : 0.0 ## 1st Qu.:50.57 1st Qu.:18452 1st Qu.: 8.73 1st Qu.: 26.0 ## Median :58.40 Median :19844 Median :11.97 Median : 66.8 ## Mean :58.98 Mean :20250 Mean :13.35 Mean : 733.9 ## 3rd Qu.:67.19 3rd Qu.:21563 3rd Qu.:16.80 3rd Qu.: 229.5 ## Max. :89.38 Max. :46251 Max. :44.84 Max. :1801865.8 ## NA&#39;s :31598 NA&#39;s :3793 NA&#39;s :32531 NA&#39;s :821 ## P14_EMPLT_SAL P09_EMPLT P14_POP1564 ## Min. : 0.0 Min. : 0.0 Min. : 0.0 ## 1st Qu.: 13.0 1st Qu.: 26.1 1st Qu.: 120.3 ## Median : 42.0 Median : 65.2 Median : 275.0 ## Mean : 637.8 Mean : 716.4 Mean : 1165.0 ## 3rd Qu.: 173.4 3rd Qu.: 220.6 3rd Qu.: 684.8 ## Max. :1562078.5 Max. :1805470.4 Max. :1554076.1 ## NA&#39;s :821 NA&#39;s :9 NA&#39;s :821 ## P14_CHOM1564 P14_ACT1564 ETTOT14 ETAZ14 ## Min. : 0.00 Min. : 0.0 Min. : 0.0 Min. : 0.00 ## 1st Qu.: 8.85 1st Qu.: 90.5 1st Qu.: 19.0 1st Qu.: 4.00 ## Median : 20.45 Median : 208.3 Median : 38.0 Median : 7.00 ## Mean : 119.75 Mean : 855.8 Mean : 179.3 Mean : 11.36 ## 3rd Qu.: 51.78 3rd Qu.: 518.0 3rd Qu.: 92.0 3rd Qu.: 14.00 ## Max. :144515.41 Max. :1202565.3 Max. :551952.0 Max. :587.00 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :25 NA&#39;s :25 ## ETBE14 ETFZ14 ETGU14 ETGZ14 ## Min. : 0.000 Min. : 0.00 Min. : 0.0 Min. : 0.00 ## 1st Qu.: 1.000 1st Qu.: 2.00 1st Qu.: 7.0 1st Qu.: 1.00 ## Median : 3.000 Median : 5.00 Median : 17.0 Median : 4.00 ## Mean : 9.417 Mean : 18.18 Mean : 116.1 Mean : 28.73 ## 3rd Qu.: 7.000 3rd Qu.: 12.00 3rd Qu.: 47.0 3rd Qu.: 13.00 ## Max. :15181.000 Max. :24528.00 Max. :462763.0 Max. :65004.00 ## NA&#39;s :25 NA&#39;s :25 NA&#39;s :25 NA&#39;s :25 ## ETOQ14 ETTEF114 ETTEFP1014 densite ## Min. : 0.00 Min. : 0.00 Min. : 0.00 Min. : 0.00 ## 1st Qu.: 2.00 1st Qu.: 4.00 1st Qu.: 0.00 1st Qu.: 18.59 ## Median : 4.00 Median : 8.00 Median : 1.00 Median : 40.35 ## Mean : 24.22 Mean : 41.33 Mean : 10.28 Mean : 160.15 ## 3rd Qu.: 10.00 3rd Qu.: 19.00 3rd Qu.: 4.00 3rd Qu.: 94.57 ## Max. :48893.00 Max. :124131.00 Max. :24527.00 Max. :27126.14 ## NA&#39;s :25 NA&#39;s :25 NA&#39;s :25 NA&#39;s :821 ## tx_natal tx_mort ## Min. : 0.000 Min. : 0.000 ## 1st Qu.: 5.679 1st Qu.: 4.448 ## Median : 9.264 Median : 7.874 ## Mean : 9.699 Mean : 9.328 ## 3rd Qu.: 12.931 3rd Qu.: 12.389 ## Max. :111.111 Max. :157.738 ## NA&#39;s :827 NA&#39;s :827 # 2 vect_densite &lt;- df %&gt;% pull(densite) mean(vect_densite) ## [1] NA sd(vect_densite) ## [1] NA median(vect_densite) ## [1] NA var(vect_densite) ## [1] NA # 3 mean(vect_densite, na.rm = T) ## [1] 160.151 sd(vect_densite, na.rm = T) ## [1] 722.799 median(vect_densite, na.rm = T) ## [1] 40.35457 var(vect_densite, na.rm = T) ## [1] 522438.4 # 4 quantile(vect_densite, na.rm = T) ## 0% 25% 50% 75% 100% ## 0.00000 18.59047 40.35457 94.57430 27126.14108 seq(0, 1, 0.1) # vérifier la séquence qu&#39;on souhaite ## [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 quantile(vect_densite, probs = seq(0, 1, 0.1), na.rm = T) ## 0% 10% 20% 30% 40% 50% ## 0.00000 10.03439 15.65357 21.84208 29.76144 40.35457 ## 60% 70% 80% 90% 100% ## 54.82089 77.65199 119.08740 240.40789 27126.14108 # 5 df &lt;- df %&gt;% mutate(std_dens = (densite - mean(densite, na.rm = T)) / sd(densite, na.rm = T)) #6 # une variable t &lt;- select(df, ZAU) %&gt;% table() t ## ZAU ## 111 - Grand pôle (plus de 10 000 emplois) ## 3285 ## 112 - Couronne d&#39;un grand pôle ## 12297 ## 120 - Multipolarisée des grandes aires urbaines ## 3962 ## 211 - Moyen pôle (5 000 à 10 000 emplois) ## 456 ## 212 - Couronne d&#39;un moyen pôle ## 815 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) ## 888 ## 222 - Couronne d&#39;un petit pôle ## 582 ## 300 - Autre commune multipolarisée ## 7021 ## 400 - Commune isolée hors influence des pôles ## 7383 100 * prop.table(t) %&gt;% round(digits = 4) ## ZAU ## 111 - Grand pôle (plus de 10 000 emplois) ## 8.95 ## 112 - Couronne d&#39;un grand pôle ## 33.52 ## 120 - Multipolarisée des grandes aires urbaines ## 10.80 ## 211 - Moyen pôle (5 000 à 10 000 emplois) ## 1.24 ## 212 - Couronne d&#39;un moyen pôle ## 2.22 ## 221 - Petit pôle (de 1 500 à 5 000 emplois) ## 2.42 ## 222 - Couronne d&#39;un petit pôle ## 1.59 ## 300 - Autre commune multipolarisée ## 19.14 ## 400 - Commune isolée hors influence des pôles ## 20.12 # deux variables t &lt;- select(df, REG, ZAU) %&gt;% table() t ## ZAU ## REG 111 - Grand pôle (plus de 10 000 emplois) 112 - Couronne d&#39;un grand pôle ## 01 17 6 ## 02 16 0 ## 03 3 3 ## 04 10 3 ## 11 413 853 ## 24 103 734 ## 27 140 1299 ## 28 216 1126 ## 32 481 1505 ## 44 322 1721 ## 52 108 535 ## 53 89 415 ## 75 333 1161 ## 76 258 1124 ## 84 548 1484 ## 93 220 229 ## 94 8 99 ## ZAU ## REG 120 - Multipolarisée des grandes aires urbaines ## 01 1 ## 02 4 ## 03 0 ## 04 4 ## 11 3 ## 24 188 ## 27 336 ## 28 488 ## 32 729 ## 44 822 ## 52 186 ## 53 152 ## 75 254 ## 76 333 ## 84 390 ## 93 69 ## 94 3 ## ZAU ## REG 211 - Moyen pôle (5 000 à 10 000 emplois) 212 - Couronne d&#39;un moyen pôle ## 01 0 0 ## 02 3 0 ## 03 2 0 ## 04 2 0 ## 11 3 2 ## 24 30 72 ## 27 31 122 ## 28 34 104 ## 32 33 18 ## 44 54 102 ## 52 23 44 ## 53 47 18 ## 75 51 81 ## 76 79 155 ## 84 43 84 ## 93 20 11 ## 94 1 2 ## ZAU ## REG 221 - Petit pôle (de 1 500 à 5 000 emplois) 222 - Couronne d&#39;un petit pôle ## 01 3 0 ## 02 2 0 ## 03 1 0 ## 04 0 0 ## 11 0 0 ## 24 46 19 ## 27 60 137 ## 28 78 29 ## 32 54 18 ## 44 89 118 ## 52 69 8 ## 53 42 1 ## 75 163 81 ## 76 123 89 ## 84 113 47 ## 93 32 6 ## 94 13 29 ## ZAU ## REG 300 - Autre commune multipolarisée ## 01 2 ## 02 4 ## 03 0 ## 04 1 ## 11 7 ## 24 375 ## 27 737 ## 28 762 ## 32 711 ## 44 1155 ## 52 386 ## 53 325 ## 75 1002 ## 76 877 ## 84 517 ## 93 107 ## 94 53 ## ZAU ## REG 400 - Commune isolée hors influence des pôles ## 01 3 ## 02 5 ## 03 13 ## 04 4 ## 11 0 ## 24 275 ## 27 969 ## 28 396 ## 32 289 ## 44 815 ## 52 143 ## 53 181 ## 75 1379 ## 76 1527 ## 84 963 ## 93 269 ## 94 152 100 * prop.table(t) %&gt;% round(digits = 4) ## ZAU ## REG 111 - Grand pôle (plus de 10 000 emplois) 112 - Couronne d&#39;un grand pôle ## 01 0.05 0.02 ## 02 0.04 0.00 ## 03 0.01 0.01 ## 04 0.03 0.01 ## 11 1.13 2.32 ## 24 0.28 2.00 ## 27 0.38 3.54 ## 28 0.59 3.07 ## 32 1.31 4.10 ## 44 0.88 4.69 ## 52 0.29 1.46 ## 53 0.24 1.13 ## 75 0.91 3.16 ## 76 0.70 3.06 ## 84 1.49 4.04 ## 93 0.60 0.62 ## 94 0.02 0.27 ## ZAU ## REG 120 - Multipolarisée des grandes aires urbaines ## 01 0.00 ## 02 0.01 ## 03 0.00 ## 04 0.01 ## 11 0.01 ## 24 0.51 ## 27 0.92 ## 28 1.33 ## 32 1.99 ## 44 2.24 ## 52 0.51 ## 53 0.41 ## 75 0.69 ## 76 0.91 ## 84 1.06 ## 93 0.19 ## 94 0.01 ## ZAU ## REG 211 - Moyen pôle (5 000 à 10 000 emplois) 212 - Couronne d&#39;un moyen pôle ## 01 0.00 0.00 ## 02 0.01 0.00 ## 03 0.01 0.00 ## 04 0.01 0.00 ## 11 0.01 0.01 ## 24 0.08 0.20 ## 27 0.08 0.33 ## 28 0.09 0.28 ## 32 0.09 0.05 ## 44 0.15 0.28 ## 52 0.06 0.12 ## 53 0.13 0.05 ## 75 0.14 0.22 ## 76 0.22 0.42 ## 84 0.12 0.23 ## 93 0.05 0.03 ## 94 0.00 0.01 ## ZAU ## REG 221 - Petit pôle (de 1 500 à 5 000 emplois) 222 - Couronne d&#39;un petit pôle ## 01 0.01 0.00 ## 02 0.01 0.00 ## 03 0.00 0.00 ## 04 0.00 0.00 ## 11 0.00 0.00 ## 24 0.13 0.05 ## 27 0.16 0.37 ## 28 0.21 0.08 ## 32 0.15 0.05 ## 44 0.24 0.32 ## 52 0.19 0.02 ## 53 0.11 0.00 ## 75 0.44 0.22 ## 76 0.34 0.24 ## 84 0.31 0.13 ## 93 0.09 0.02 ## 94 0.04 0.08 ## ZAU ## REG 300 - Autre commune multipolarisée ## 01 0.01 ## 02 0.01 ## 03 0.00 ## 04 0.00 ## 11 0.02 ## 24 1.02 ## 27 2.01 ## 28 2.08 ## 32 1.94 ## 44 3.15 ## 52 1.05 ## 53 0.89 ## 75 2.73 ## 76 2.39 ## 84 1.41 ## 93 0.29 ## 94 0.14 ## ZAU ## REG 400 - Commune isolée hors influence des pôles ## 01 0.01 ## 02 0.01 ## 03 0.04 ## 04 0.01 ## 11 0.00 ## 24 0.75 ## 27 2.64 ## 28 1.08 ## 32 0.79 ## 44 2.22 ## 52 0.39 ## 53 0.49 ## 75 3.76 ## 76 4.16 ## 84 2.62 ## 93 0.73 ## 94 0.41 11.8 Exercice 5 : créer des graphiques Nous travaillons toujours sur le dataset df calculé à l’exercice précédent. À l’aide de l’aide mémoire ggplot2 : Réaliser un histogramme de la population communale Transformer les données avec la fonction log pour y voir plus clair Faire un barplot (qui n’est pas un histogramme !!!!) du nombre de communes par REG. Utiliser le paramètre fill de la fonction aes() pour améliorer le graphique Réaliser un graphique (nuage de points) croisant la densité de population et le taux de mortalité Ajouter une dimension supplémentaire avec la couleur des points (paramètre color de aes()) Résultat attendu : library(dplyr) df &lt;- read.csv(file = system.file(&quot;extdata&quot;, &quot;Base_synth_territoires.csv&quot;, package = &quot;savoirfR&quot;), header = TRUE, sep = &quot;;&quot;, dec = &quot;,&quot;, colClasses = c(rep(&quot;character&quot;, 2), rep(&quot;factor&quot;, 4) , rep(NA, 32))) %&gt;% mutate(densite = P14_POP / SUPERF, tx_natal = 1000 * NAISD15 / P14_POP, tx_mort = 1000 * DECESD15 / P14_POP) library(ggplot2) ggplot(data = df, aes(x = P14_POP)) + geom_histogram() # Ce n&#39;est pas très informatif, avec une transformation log, on y voit plus clair ! ggplot(data = df, aes(x = log(P14_POP))) + geom_histogram() # barplot ggplot(data = df, aes(x = REG)) + geom_bar() # améliorer avec le paramètre `fill` ggplot(data = df, aes(x = REG, fill = REG)) + geom_bar() # nuage de points ggplot(data = df, aes(x = densite, y = tx_mort)) + geom_point() # ajout couleur ggplot(data = df, aes(x = densite, y = tx_mort, color = REG)) + geom_point() Là encore il faudrait faire une transformation logarithmique, mais tout ça est abordé dans le module 3 ! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
